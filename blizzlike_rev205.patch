# HG changeset patch
# User asniker
# Date 1290080305 -18000
# Node ID ecb7104dcf18dd46229b689098e087850c884268
# Parent  97558283f19bd56fb72c53476e6ad3755ffaa05b
ядро: фикс Glyph of Scourge Strike

diff --git a/src/server/scripts/Spells/spell_dk.cpp b/src/server/scripts/Spells/spell_dk.cpp
--- a/src/server/scripts/Spells/spell_dk.cpp
+++ b/src/server/scripts/Spells/spell_dk.cpp
@@ -49,11 +49,122 @@
             return true;
         }
 
+		 void GetGlyphScourgeStrikeAuraEffects(Unit const * caster, Unit const * target, Unit::AuraEffectList & auras)
+        {
+            Unit::AuraEffectList const & aurasA = target->GetAuraEffectsByType(SPELL_AURA_DUMMY);
+            for (Unit::AuraEffectList::const_iterator itr = aurasA.begin(); itr != aurasA.end(); ++itr)
+            {
+                if (((*itr)->GetCasterGUID() != caster->GetGUID()) || ((*itr)->GetEffIndex() != EFFECT_0))
+                    continue;
+
+                SpellEntry const * spellProto = (*itr)->GetSpellProto();
+                if ((spellProto->SpellIconID == 23) && (SpellFamilyNames(spellProto->SpellFamilyName) == SPELLFAMILY_GENERIC))
+                    auras.push_back(*itr);
+            }
+        }
+
+        AuraEffect * GetGlyphScourgeStrikeAuraEffect(uint32 diseaseId, Unit::AuraEffectList const & auras)
+        {
+            for (Unit::AuraEffectList::const_iterator itr = auras.begin(); itr != auras.end(); ++itr)
+                if (diseaseId == ((*itr)->GetAmount() >> 4))
+                    return (*itr);
+
+            return NULL;
+        }
+
         void HandleDummy(SpellEffIndex /*effIndex*/)
         {
-            if (Unit* unitTarget = GetHitUnit())
+            static const AuraType diseaseAuraTypes[] =
+            {
+                SPELL_AURA_PERIODIC_DAMAGE, // Frost Fever and Blood Plague
+                SPELL_AURA_LINKED,          // Crypt Fever and Ebon Plague
+                SPELL_AURA_NONE
+            };
+
+            Unit * caster = GetCaster();
+            Unit * target = GetHitUnit();
+
+            if (!target)
+                return;
+
+            uint32 diseases = 0;
+            int32 extratime, maxtime;
+            AuraEffect const * aurEffA;
+
+            Unit::AuraEffectList aurasA;
+            GetGlyphScourgeStrikeAuraEffects(caster, caster, aurasA);
+
+            bool hasGlyph = bool(aurasA.size());
+
+            if (hasGlyph)
+            {
+                aurEffA = *aurasA.begin();
+                extratime = aurEffA->GetAmount();
+                maxtime = SpellMgr::CalculateSpellEffectAmount(aurEffA->GetSpellProto(), EFFECT_1);
+
+                aurasA.clear();
+                GetGlyphScourgeStrikeAuraEffects(caster, target, aurasA);
+             }
+
+            for (AuraType const * itrA = &diseaseAuraTypes[0]; itrA && itrA[0] != SPELL_AURA_NONE; ++itrA)
+            {
+                Unit::AuraEffectList const & aurasB = target->GetAuraEffectsByType(*itrA);
+                for (Unit::AuraEffectList::const_iterator itrB = aurasB.begin(); itrB != aurasB.end(); ++itrB)
+                    if (((*itrB)->GetSpellProto()->Dispel == DISPEL_DISEASE) &&
+                        ((*itrB)->GetCasterGUID() == caster->GetGUID()))
+                    {
+                        ++diseases;
+
+                        if (!hasGlyph)
+                            continue;
+
+                        Aura * aura = (*itrB)->GetBase();
+
+                        int32 applytime = int32(aura->GetApplyTime() & 0x7FFFFFFF);
+                        int32 duration = std::min(aura->GetDuration() + (extratime * IN_MILLISECONDS), aura->GetMaxDuration());
+
+                        if (AuraEffect * aurEffB = GetGlyphScourgeStrikeAuraEffect(aura->GetId(), aurasA))
+                        {
+                            aurEffB->GetBase()->SetDuration(duration);
+
+                            if (applytime != aurEffB->GetBase()->GetMaxDuration())
+                                aurEffB->SetAmount(aurEffB->GetAmount() & ~(0xF));
+
+                            if (maxtime <= (aurEffB->GetAmount() & 0xF))
+                                continue;
+
+                            aura->SetDuration(duration);
+
+                            aurEffB->GetBase()->SetMaxDuration(applytime);
+                            aurEffB->SetAmount(aurEffB->GetAmount() + extratime);
+
+                            continue;
+                        }
+
+                        int32 bp0 = (aura->GetId() << 4) + extratime;
+                        caster->CastCustomSpell(target, aurEffA->GetId(), &bp0, NULL, NULL, true);
+
+                        Unit::AuraEffectList tmp;
+                        GetGlyphScourgeStrikeAuraEffects(caster, target, tmp);
+
+                        if (AuraEffect * aurEffB = GetGlyphScourgeStrikeAuraEffect(aura->GetId(), tmp))
+                        {
+                            aura->SetDuration(duration);
+
+                            aurEffB->GetBase()->SetMaxDuration(applytime);
+                            aurEffB->GetBase()->SetDuration(duration);
+                        }
+                    }
+            }
+
+            int32 bp0 = (GetHitDamage() * GetEffectValue() * diseases) / 100;
+            caster->CastCustomSpell(target, DK_SPELL_SCOURGE_STRIKE_TRIGGERED, &bp0, NULL, NULL, true);
+ 
+ 
+           if (Unit* unitTarget = GetHitUnit())
             {
                 int32 bp = 0;
+
                 // Living ghoul as a target
                 if (unitTarget->isAlive())
                     bp = int32(unitTarget->CountPctFromMaxHealth(25));
@@ -66,8 +177,8 @@
                 // Set corpse look
                 unitTarget->SetDisplayId(DISPLAY_GHOUL_CORPSE + urand(0, 3));
             }
-        }
-
+		}	
+			
         void Register()
         {
             OnEffect += SpellEffectFn(spell_dk_corpse_explosion_SpellScript::HandleDummy, EFFECT_0, SPELL_EFFECT_DUMMY);
