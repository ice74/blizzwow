# HG changeset patch
# User asniker
# Date 1286695503 -21600
# Node ID c509dd3ddb410e35ffd35820857cae732fe08b19
# Parent  94f48961bbc7db4a712660bcc32b23e86c49fd38
fix scriptloader.cpp warnings

diff --git a/src/server/game/Scripting/ScriptLoader.cpp b/src/server/game/Scripting/ScriptLoader.cpp
--- a/src/server/game/Scripting/ScriptLoader.cpp
+++ b/src/server/game/Scripting/ScriptLoader.cpp
@@ -355,8 +355,8 @@
 void AddSC_trial_of_the_champion();
 void AddSC_boss_anubarak_trial();        //Trial of the Crusader
 void AddSC_boss_faction_champions();
-void AddSC_boss_jaraxxus();
-void AddSC_boss_twin_valkyr();
+void AddSC_boss_lord_jaraxxus();
+void AddSC_boss_twins_valkyr();
 void AddSC_trial_of_the_crusader();
 void AddSC_instance_trial_of_the_crusader();
 void AddSC_boss_beasts_of_northrend();
@@ -382,9 +382,8 @@
 void AddSC_boss_keristrasza();
 void AddSC_instance_nexus();
 void AddSC_boss_malygos();            //The Nexus Eye Of Eternity
-void AddSC_eye_of_eternity();
 void AddSC_instance_eye_of_eternity();
-void AddSC_npc_alexsrtaza();
+void AddSC_npc_alexstraza();
 void AddSC_boss_drakos();                //The Nexus The Oculus
 void AddSC_boss_urom();
 void AddSC_instance_oculus();
@@ -407,7 +406,7 @@
 void AddSC_boss_razorscale();
 void AddSC_boss_xt002();
 void AddSC_boss_kologarn();
-void AddSC_boss_assembly_of_iron();
+void AddSC_bosses_assembly_of_iron();
 void AddSC_ulduar_teleporter();
 void AddSC_instance_ulduar();
 void AddSC_boss_keleseth();              //Utgarde Keep
@@ -452,7 +451,7 @@
 void AddSC_halls_of_reflection();
 void AddSC_boss_falric();
 void AddSC_boss_marwyn();
-void AddSC_boss_the_lich_king_hor();
+void AddSC_boss_lich_king_hr();
 void AddSC_instance_icecrown_citadel();    // Icecrown Citadel
 void AddSC_icecrown_citadel();
 void AddSC_boss_valithria();
@@ -1034,9 +1033,9 @@
     AddSC_trial_of_the_champion();
     AddSC_boss_anubarak_trial();        //Trial of the Crusader
     AddSC_boss_faction_champions();
-    AddSC_boss_jaraxxus();
+    AddSC_boss_lord_jaraxxus();
     AddSC_trial_of_the_crusader();
-    AddSC_boss_twin_valkyr();
+    AddSC_boss_twins_valkyr();
     AddSC_instance_trial_of_the_crusader();
 	AddSC_boss_beasts_of_northrend();
     AddSC_boss_krik_thir();             //Azjol-Nerub Azjol-Nerub
@@ -1065,9 +1064,8 @@
     AddSC_boss_keristrasza();
     AddSC_instance_nexus();
 	AddSC_boss_malygos();            //The Nexus Eye Of Eternity
-    AddSC_eye_of_eternity();
     AddSC_instance_eye_of_eternity();
-    AddSC_npc_alexsrtaza();
+    AddSC_npc_alexstraza();
     AddSC_boss_drakos();                //The Nexus The Oculus
     AddSC_boss_urom();
     AddSC_instance_oculus();
@@ -1090,7 +1088,7 @@
     AddSC_boss_ignis();
     AddSC_boss_razorscale();
     AddSC_boss_xt002();
-    AddSC_boss_assembly_of_iron();
+    AddSC_bosses_assembly_of_iron();
     AddSC_boss_kologarn();
     AddSC_ulduar_teleporter();
     AddSC_instance_ulduar();
@@ -1136,7 +1134,7 @@
     AddSC_halls_of_reflection();
     AddSC_boss_falric();
     AddSC_boss_marwyn();
-	AddSC_boss_the_lich_king_hor();
+	AddSC_boss_lich_king_hr();
     AddSC_instance_icecrown_citadel();    // Icecrown Citadel
     AddSC_icecrown_citadel();
     AddSC_boss_valithria();
diff --git a/src/server/scripts/Northrend/Nexus/EyeOfEternity/eye_of_eternity.h b/src/server/scripts/Northrend/Nexus/EyeOfEternity/eye_of_eternity.h
--- a/src/server/scripts/Northrend/Nexus/EyeOfEternity/eye_of_eternity.h
+++ b/src/server/scripts/Northrend/Nexus/EyeOfEternity/eye_of_eternity.h
@@ -12,24 +12,24 @@
  *
  * You should have received a copy of the GNU General Public License along
  * with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef DEF_EYE_OF_ETERNITY_H
-#define DEF_EYE_OF_ETERNITY_H
-
-enum
-{
-    MAX_ENCOUNTER                = 1,
-
-    TYPE_MALYGOS                 = 2,
-    TYPE_OUTRO_CHECK             = 4,  // Because this encounter is really hard and outro takes about 90s and malygos dies at its end, I add some check against server crash
-    TYPE_DESTROY_PLATFORM        = 5,
-    TYPE_VORTEX                  = 6,
-    TYPE_PLAYER_HOVER            = 7,
-    DATA_DROP_PLAYERS            = 8,
-
-    NPC_WYRMREST_SKYTALON        = 30161, // Dragon Vehicle in Third Phase
-    NPC_MALYGOS                  = 28859,
-};
-
-#endif
+ */
+
+#ifndef DEF_EYE_OF_ETERNITY_H
+#define DEF_EYE_OF_ETERNITY_H
+
+enum
+{
+    MAX_ENCOUNTER                = 1,
+
+    TYPE_MALYGOS                 = 2,
+    TYPE_OUTRO_CHECK             = 4,  // Because this encounter is really hard and outro takes about 90s and malygos dies at its end, I add some check against server crash
+    TYPE_DESTROY_PLATFORM        = 5,
+    TYPE_VORTEX                  = 6,
+    TYPE_PLAYER_HOVER            = 7,
+    DATA_DROP_PLAYERS            = 8,
+
+    NPC_WYRMREST_SKYTALON        = 30161, // Dragon Vehicle in Third Phase
+    NPC_MALYGOS                  = 28859,
+};
+
+#endif
diff --git a/src/server/scripts/Northrend/Nexus/EyeOfEternity/instance_eye_of_eternity.cpp b/src/server/scripts/Northrend/Nexus/EyeOfEternity/instance_eye_of_eternity.cpp
--- a/src/server/scripts/Northrend/Nexus/EyeOfEternity/instance_eye_of_eternity.cpp
+++ b/src/server/scripts/Northrend/Nexus/EyeOfEternity/instance_eye_of_eternity.cpp
@@ -13,280 +13,280 @@
  *
  * You should have received a copy of the GNU General Public License along
  * with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "ScriptPCH.h"
-#include "eye_of_eternity.h"
-#include "WorldPacket.h"
-
-#define DISABLED_ENTER_MESSAGE "You cannot enter Eye of Eternity now"
-#define EXIT_MAP 571
-#define EXIT_X 3864
-#define EXIT_Z 6987
-#define EXIT_Y 152
-
-class instance_eye_of_eternity : public InstanceMapScript
-{
-    public:
-        instance_eye_of_eternity() : InstanceMapScript("instance_eye_of_eternity", 616) { }
-
-        InstanceScript* GetInstanceScript(InstanceMap* pMap) const
-        {
-            return new instance_eye_of_eternity_InstanceMapScript(pMap);
-        }
-
-        struct instance_eye_of_eternity_InstanceMapScript : public InstanceScript
-        {
-            instance_eye_of_eternity_InstanceMapScript(Map* pMap) : InstanceScript(pMap) {Initialize();};
-
-            std::string strInstData;
-            uint32 m_auiEncounter[MAX_ENCOUNTER];
-            uint32 m_uiOutroCheck;
-            uint32 m_uiMalygosPlatformData;
-
-            //GameObject* m_uiMalygosPlatform;
-            //GameObject* m_uiFocusingIris;
-            //GameObject* m_uiExitPortal;
-
-            uint64 m_uiMalygosPlatformGUID;
-            uint64 m_uiFocusingIrisGUID;
-            uint64 m_uiExitPortalGUID;
-
-            uint64 m_uiMalygosGUID;
-            uint64 m_uiPlayerCheckGUID;
-
-            bool m_bVortex;
-
-            void Initialize()
-            {
-                memset(&m_auiEncounter, 0, sizeof(m_auiEncounter));
-
-                m_uiMalygosGUID = 0;
-                m_uiOutroCheck = 0;
-                m_uiMalygosPlatformData = 0;
-                m_uiMalygosPlatformGUID = 0;
-                m_uiFocusingIrisGUID = 0;
-                m_uiExitPortalGUID = 0;
-                m_uiPlayerCheckGUID = 0;
-                m_bVortex = false;
-            }
-
-            void OnCreatureCreate(Creature* pCreature)
-            {
-                switch(pCreature->GetEntry())
-                {
-                    case NPC_MALYGOS:
-                        m_uiMalygosGUID = pCreature->GetGUID();
-                    break;
-
-                    default:
-                    break;
-                }
-            }
-
-            void OnGameObjectCreate(GameObject *pGo, bool /*bAdd*/)
-            {
-                switch(pGo->GetEntry())
-                {
-                    case 193070: m_uiMalygosPlatformGUID = pGo->GetGUID(); break;
-                    case 193958: break; //normal,hero
-                    case 193960: m_uiFocusingIrisGUID = pGo->GetGUID(); break;
-                    case 193908: m_uiExitPortalGUID = pGo->GetGUID(); break;
-                    default:
-                        break;
-                }
-            }
-
-            bool IsEncounterInProgress() const
-            {
-                for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)
-                {
-                    if (m_auiEncounter[i] == IN_PROGRESS)
-                    {
-                        return true;
-                    }
-                }
-
-                return false;
-            }
-
-            void SetData(uint32 uiType, uint32 uiData)
-            {
-                switch(uiType)
-                {
-                    case TYPE_MALYGOS:
-                        if (uiData == IN_PROGRESS)
-                        {
-                            if(GameObject* m_uiExitPortal = instance->GetGameObject(m_uiExitPortalGUID))
-                            {
-                                m_uiExitPortal->SetPhaseMask(2, true);
-                            }
-
-                            if(GameObject* m_uiFocusingIris = instance->GetGameObject(m_uiFocusingIrisGUID))
-                            {
-                                m_uiFocusingIris->SetPhaseMask(2, true);
-                            }
-                        }
-                        if (uiData == NOT_STARTED)
-                        {
-                            //Summon Platform
-                            SetData(TYPE_DESTROY_PLATFORM, NOT_STARTED);
-                            //Summon focusing iris
-                            if(GameObject* pGo = instance->GetGameObject(m_uiFocusingIrisGUID))
-                            {
-                                pGo->SetPhaseMask(1, true);
-                            }
-                            //Summon exit portal
-                            if(GameObject* pGo = instance->GetGameObject(m_uiExitPortalGUID))
-                            {
-                                pGo->SetPhaseMask(1, true);
-                            }
-                        }
-
-                        m_auiEncounter[0] = uiData;
-                        break;
-                    case TYPE_OUTRO_CHECK:
-                        m_uiOutroCheck = uiData;
-                        break;
-                    case TYPE_DESTROY_PLATFORM:
-                        if(uiData == IN_PROGRESS)
-                        {
-                            if(GameObject* m_uiMalygosPlatform = instance->GetGameObject(m_uiMalygosPlatformGUID))
-                            {
-                                m_uiMalygosPlatform->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_DESTROYED);
-                            }
-                        }
-                        else if(uiData == NOT_STARTED)
-                        {
-                            if(GameObject* m_uiMalygosPlatform = instance->GetGameObject(m_uiMalygosPlatformGUID))
-                            {
-                                m_uiMalygosPlatform->RemoveFlag(GAMEOBJECT_FLAGS, GO_FLAG_DESTROYED);
-                                m_uiMalygosPlatform->Respawn();
-                            }
-                        }
-                        m_uiMalygosPlatformData = uiData;
-                        break;
-                    case TYPE_VORTEX:
-                        if(uiData)
-                        {
-                            m_bVortex = true;
-                        }
-                        else
-                        {
-                            m_bVortex = false;
-                        }
-                        break;
-                    case TYPE_PLAYER_HOVER:
-                        if(uiData == DATA_DROP_PLAYERS)
-                        {
-                            dropAllPlayers();
-                        }
-                        break;
-                }
-            }
-
-            const char* Save()
-            {
-                OUT_SAVE_INST_DATA;
-                std::ostringstream saveStream;
-                saveStream << m_auiEncounter[0] << " " << m_uiOutroCheck;
-
-                strInstData = saveStream.str();
-                SaveToDB();
-                OUT_SAVE_INST_DATA_COMPLETE;
-
-                return strInstData.c_str();
-            }
-
-            void Load(const char* chrIn)
-            {
-                if (!chrIn)
-                {
-                    OUT_LOAD_INST_DATA_FAIL;
-                    return;
-                }
-
-                OUT_LOAD_INST_DATA(chrIn);
-
-                std::istringstream loadStream(chrIn);
-                loadStream >> m_auiEncounter[0] >> m_uiOutroCheck;
-
-                for(uint8 i = 0; i < MAX_ENCOUNTER; ++i)
-                {
-                    if (m_auiEncounter[i] == IN_PROGRESS)
-                    {
-                        m_auiEncounter[i] = NOT_STARTED;
-                    }
-                }
-
-                OUT_LOAD_INST_DATA_COMPLETE;
-            }
-
-            uint32 GetData(uint32 uiType)
-            {
-                switch(uiType)
-                {
-                    case TYPE_MALYGOS:
-                        return m_auiEncounter[0];
-                    case TYPE_OUTRO_CHECK:
-                        return m_uiOutroCheck;
-                    case TYPE_DESTROY_PLATFORM:
-                        return m_uiMalygosPlatformData;
-                    case TYPE_VORTEX:
-                        return m_bVortex;
-                }
-
-                return 0;
-            }
-
-            uint64 GetData64(uint32 uiData)
-            {
-                switch(uiData)
-                {
-                    case NPC_MALYGOS:
-                        return m_uiMalygosGUID;
-                    default:
-                        return 0;
-                }
-                return 0;
-            }
-
-            void dropAllPlayers()
-            {
-                Map::PlayerList const &PlayerList = instance->GetPlayers();
-
-                if (!PlayerList.isEmpty())
-                {
-                    for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
-                    {
-                        if (Player *pPlayer = i->getSource())
-                        {
-                            if (Unit* pDisk = pPlayer->GetVehicleBase())
-                            {
-                                pPlayer->ExitVehicle();
-                                pDisk->ToCreature()->ForcedDespawn();
-                            }
-                        }
-                    }
-                }
-            }
-
-            void OnPlayerEnter(Player* pPlayer)
-            {
-                if(GetData(TYPE_MALYGOS) == DONE)
-                {
-                    Creature *pTemp = pPlayer->SummonCreature(NPC_WYRMREST_SKYTALON, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ() - 5, 0);
-                    if(pTemp)
-                    {
-                        pTemp->SetCreatorGUID(pPlayer->GetGUID());
-                        pPlayer->EnterVehicle(pTemp, 0);
-                    }
-                }
-            }
-        };
-};
-
-void AddSC_instance_eye_of_eternity()
-{
-    new instance_eye_of_eternity();
-}
+ */
+
+#include "ScriptPCH.h"
+#include "eye_of_eternity.h"
+#include "WorldPacket.h"
+
+#define DISABLED_ENTER_MESSAGE "You cannot enter Eye of Eternity now"
+#define EXIT_MAP 571
+#define EXIT_X 3864
+#define EXIT_Z 6987
+#define EXIT_Y 152
+
+class instance_eye_of_eternity : public InstanceMapScript
+{
+    public:
+        instance_eye_of_eternity() : InstanceMapScript("instance_eye_of_eternity", 616) { }
+
+        InstanceScript* GetInstanceScript(InstanceMap* pMap) const
+        {
+            return new instance_eye_of_eternity_InstanceMapScript(pMap);
+        }
+
+        struct instance_eye_of_eternity_InstanceMapScript : public InstanceScript
+        {
+            instance_eye_of_eternity_InstanceMapScript(Map* pMap) : InstanceScript(pMap) {Initialize();};
+
+            std::string strInstData;
+            uint32 m_auiEncounter[MAX_ENCOUNTER];
+            uint32 m_uiOutroCheck;
+            uint32 m_uiMalygosPlatformData;
+
+            //GameObject* m_uiMalygosPlatform;
+            //GameObject* m_uiFocusingIris;
+            //GameObject* m_uiExitPortal;
+
+            uint64 m_uiMalygosPlatformGUID;
+            uint64 m_uiFocusingIrisGUID;
+            uint64 m_uiExitPortalGUID;
+
+            uint64 m_uiMalygosGUID;
+            uint64 m_uiPlayerCheckGUID;
+
+            bool m_bVortex;
+
+            void Initialize()
+            {
+                memset(&m_auiEncounter, 0, sizeof(m_auiEncounter));
+
+                m_uiMalygosGUID = 0;
+                m_uiOutroCheck = 0;
+                m_uiMalygosPlatformData = 0;
+                m_uiMalygosPlatformGUID = 0;
+                m_uiFocusingIrisGUID = 0;
+                m_uiExitPortalGUID = 0;
+                m_uiPlayerCheckGUID = 0;
+                m_bVortex = false;
+            }
+
+            void OnCreatureCreate(Creature* pCreature)
+            {
+                switch(pCreature->GetEntry())
+                {
+                    case NPC_MALYGOS:
+                        m_uiMalygosGUID = pCreature->GetGUID();
+                    break;
+
+                    default:
+                    break;
+                }
+            }
+
+            void OnGameObjectCreate(GameObject *pGo, bool /*bAdd*/)
+            {
+                switch(pGo->GetEntry())
+                {
+                    case 193070: m_uiMalygosPlatformGUID = pGo->GetGUID(); break;
+                    case 193958: break; //normal,hero
+                    case 193960: m_uiFocusingIrisGUID = pGo->GetGUID(); break;
+                    case 193908: m_uiExitPortalGUID = pGo->GetGUID(); break;
+                    default:
+                        break;
+                }
+            }
+
+            bool IsEncounterInProgress() const
+            {
+                for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)
+                {
+                    if (m_auiEncounter[i] == IN_PROGRESS)
+                    {
+                        return true;
+                    }
+                }
+
+                return false;
+            }
+
+            void SetData(uint32 uiType, uint32 uiData)
+            {
+                switch(uiType)
+                {
+                    case TYPE_MALYGOS:
+                        if (uiData == IN_PROGRESS)
+                        {
+                            if(GameObject* m_uiExitPortal = instance->GetGameObject(m_uiExitPortalGUID))
+                            {
+                                m_uiExitPortal->SetPhaseMask(2, true);
+                            }
+
+                            if(GameObject* m_uiFocusingIris = instance->GetGameObject(m_uiFocusingIrisGUID))
+                            {
+                                m_uiFocusingIris->SetPhaseMask(2, true);
+                            }
+                        }
+                        if (uiData == NOT_STARTED)
+                        {
+                            //Summon Platform
+                            SetData(TYPE_DESTROY_PLATFORM, NOT_STARTED);
+                            //Summon focusing iris
+                            if(GameObject* pGo = instance->GetGameObject(m_uiFocusingIrisGUID))
+                            {
+                                pGo->SetPhaseMask(1, true);
+                            }
+                            //Summon exit portal
+                            if(GameObject* pGo = instance->GetGameObject(m_uiExitPortalGUID))
+                            {
+                                pGo->SetPhaseMask(1, true);
+                            }
+                        }
+
+                        m_auiEncounter[0] = uiData;
+                        break;
+                    case TYPE_OUTRO_CHECK:
+                        m_uiOutroCheck = uiData;
+                        break;
+                    case TYPE_DESTROY_PLATFORM:
+                        if(uiData == IN_PROGRESS)
+                        {
+                            if(GameObject* m_uiMalygosPlatform = instance->GetGameObject(m_uiMalygosPlatformGUID))
+                            {
+                                m_uiMalygosPlatform->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_DESTROYED);
+                            }
+                        }
+                        else if(uiData == NOT_STARTED)
+                        {
+                            if(GameObject* m_uiMalygosPlatform = instance->GetGameObject(m_uiMalygosPlatformGUID))
+                            {
+                                m_uiMalygosPlatform->RemoveFlag(GAMEOBJECT_FLAGS, GO_FLAG_DESTROYED);
+                                m_uiMalygosPlatform->Respawn();
+                            }
+                        }
+                        m_uiMalygosPlatformData = uiData;
+                        break;
+                    case TYPE_VORTEX:
+                        if(uiData)
+                        {
+                            m_bVortex = true;
+                        }
+                        else
+                        {
+                            m_bVortex = false;
+                        }
+                        break;
+                    case TYPE_PLAYER_HOVER:
+                        if(uiData == DATA_DROP_PLAYERS)
+                        {
+                            dropAllPlayers();
+                        }
+                        break;
+                }
+            }
+
+            const char* Save()
+            {
+                OUT_SAVE_INST_DATA;
+                std::ostringstream saveStream;
+                saveStream << m_auiEncounter[0] << " " << m_uiOutroCheck;
+
+                strInstData = saveStream.str();
+                SaveToDB();
+                OUT_SAVE_INST_DATA_COMPLETE;
+
+                return strInstData.c_str();
+            }
+
+            void Load(const char* chrIn)
+            {
+                if (!chrIn)
+                {
+                    OUT_LOAD_INST_DATA_FAIL;
+                    return;
+                }
+
+                OUT_LOAD_INST_DATA(chrIn);
+
+                std::istringstream loadStream(chrIn);
+                loadStream >> m_auiEncounter[0] >> m_uiOutroCheck;
+
+                for(uint8 i = 0; i < MAX_ENCOUNTER; ++i)
+                {
+                    if (m_auiEncounter[i] == IN_PROGRESS)
+                    {
+                        m_auiEncounter[i] = NOT_STARTED;
+                    }
+                }
+
+                OUT_LOAD_INST_DATA_COMPLETE;
+            }
+
+            uint32 GetData(uint32 uiType)
+            {
+                switch(uiType)
+                {
+                    case TYPE_MALYGOS:
+                        return m_auiEncounter[0];
+                    case TYPE_OUTRO_CHECK:
+                        return m_uiOutroCheck;
+                    case TYPE_DESTROY_PLATFORM:
+                        return m_uiMalygosPlatformData;
+                    case TYPE_VORTEX:
+                        return m_bVortex;
+                }
+
+                return 0;
+            }
+
+            uint64 GetData64(uint32 uiData)
+            {
+                switch(uiData)
+                {
+                    case NPC_MALYGOS:
+                        return m_uiMalygosGUID;
+                    default:
+                        return 0;
+                }
+                return 0;
+            }
+
+            void dropAllPlayers()
+            {
+                Map::PlayerList const &PlayerList = instance->GetPlayers();
+
+                if (!PlayerList.isEmpty())
+                {
+                    for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+                    {
+                        if (Player *pPlayer = i->getSource())
+                        {
+                            if (Unit* pDisk = pPlayer->GetVehicleBase())
+                            {
+                                pPlayer->ExitVehicle();
+                                pDisk->ToCreature()->ForcedDespawn();
+                            }
+                        }
+                    }
+                }
+            }
+
+            void OnPlayerEnter(Player* pPlayer)
+            {
+                if(GetData(TYPE_MALYGOS) == DONE)
+                {
+                    Creature *pTemp = pPlayer->SummonCreature(NPC_WYRMREST_SKYTALON, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ() - 5, 0);
+                    if(pTemp)
+                    {
+                        pTemp->SetCreatorGUID(pPlayer->GetGUID());
+                        pPlayer->EnterVehicle(pTemp, 0);
+                    }
+                }
+            }
+        };
+};
+
+void AddSC_instance_eye_of_eternity()
+{
+    new instance_eye_of_eternity();
+}
