# HG changeset patch
# User asniker
# Date 1287043447 -21600
# Node ID 12905392387c60fb3c05a724876942d794ee3bd8
# Parent  e6edf1f873a17d4610e00e2afe23b88cf0287755
fix icecorwn citadel

diff --git a/src/server/scripts/Northrend/IcecrownCitadel/boss_valithria_dreamwalker.cpp b/src/server/scripts/Northrend/IcecrownCitadel/boss_valithria_dreamwalker.cpp
--- a/src/server/scripts/Northrend/IcecrownCitadel/boss_valithria_dreamwalker.cpp
+++ b/src/server/scripts/Northrend/IcecrownCitadel/boss_valithria_dreamwalker.cpp
@@ -1,21 +1,21 @@
-/*
- * Copyright (C) 2008 - 2010 Trinity <http://www.trinitycore.org/>
- * Copyright (C) 2010 Bolvor <http://bitbucket.org/bolvor/icecrown-citadel/>
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
- 
+ï»¿/*
+* Copyright (C) 2009 - 2010 TrinityCore <http://www.trinitycore.org/>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+*/
+
 #include "ScriptPCH.h"
 #include "icecrown_citadel.h"
 
@@ -38,7 +38,6 @@
     SPELL_RAGE          = 71189,
     SPELL_VOLLEY        = 70759,
     SPELL_COLUMN        = 70704,
-    SPELL_COLUMN_AURA   = 70702,
     SPELL_MANA_VOID     = 71085,
     SPELL_CORRUPTING    = 70602,
     SPELL_WASTE         = 69325,
@@ -51,22 +50,26 @@
     SPELL_DREAM_STATE   = 70766,
     SPELL_PORTAL_VISUAL = 71304,
     SPELL_VIGOR         = 70873,
-    SPELL_CLOUD_VISUAL  = 70876
+    SPELL_CLOUD_VISUAL  = 70876,
+    SPELL_N_P_PORTAL_V  = 71986,
+    SPELL_N_PORTAL_V    = 71994,
+    SPELL_PORTAL_N_PRE  = 71301,
+    SPELL_PORTAL_N_NPC  = 71305,
+    SPELL_PORTAL_H_PRE  = 71977,
+    SPELL_PORTAL_H_NPC  = 71987,
+    SPELL_VOID_SUMMON   = 71197,
+    SPELL_WORM_SUMMON   = 70676
 };
 
 const Position Pos[] =
 {
-    {4239.579102f, 2566.753418f, 364.868439f, 0.0f}, 
-    {4240.688477f, 2405.794678f, 364.868591f, 0.0f}, 
-    {4165.112305f, 2405.872559f, 364.872925f, 0.0f}, 
+    {4239.579102f, 2566.753418f, 364.868439f, 0.0f}, //normal 0,1
+    {4240.688477f, 2405.794678f, 364.868591f, 0.0f}, // normal
+    {4165.112305f, 2405.872559f, 364.872925f, 0.0f}, //2,3
     {4166.216797f, 2564.197266f, 364.873047f, 0.0f}
 };
 
 Unit* pValithria;
-Unit* pPlayer;
-Unit* pBuff;
-
-Creature* combat_trigger= NULL;
 
 class boss_valithria : public CreatureScript
 {
@@ -75,7 +78,7 @@
 
         struct boss_valithriaAI : public BossAI
         {
-            boss_valithriaAI(Creature* pCreature) : BossAI(pCreature, DATA_VALITHRIA_DREAMWALKER), summons(me)
+            boss_valithriaAI(Creature* pCreature) : BossAI(pCreature, DATA_VALITHRIA_DREAMWALKER)
             {
                 pInstance = me->GetInstanceScript();
             }
@@ -87,8 +90,7 @@
                 DoCast(me, SPELL_CORRUPTION);
                 me->SetHealth(uint32(me->GetMaxHealth() * 0.50));
 
-                m_uiSummonTimer = 15000;
-                m_uiPortalTimer = 30000;
+                m_uiPortalTimer = 50000;
                 m_uiEndTimer = 1000;
 
                 bIntro = false;
@@ -109,148 +111,79 @@
                     DoScriptText(SAY_AGGRO, me);
                     bIntro = true;
 
-                    combat_trigger = me->SummonCreature(CREATURE_COMBAT_TRIGGER, me->GetPositionX(), me->GetPositionY(),me->GetPositionZ(), 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 20000);
-                    me->AddThreat(combat_trigger, 10000000.0f);
-                    combat_trigger->AddThreat(me, 10000000.0f);
-                    me->AI()->AttackStart(combat_trigger);
-                    combat_trigger->AI()->AttackStart(me);
-
                     ScriptedAI::MoveInLineOfSight(who);
                 }
             }
 
-            void EnterCombat(Unit* /*pWho*/) { }
-
-            void JustSummoned(Creature* pSummoned)
-            {
-                if (pSummoned && !pSummoned->HasAura(SPELL_PORTAL_VISUAL))
-                    pSummoned->AI()->AttackStart(me);
-
-                summons.Summon(pSummoned);
-            }
-
-            void ResetEvent()
-            {
-                Map::PlayerList const &PlList = me->GetMap()->GetPlayers();
-
-                if (PlList.isEmpty())
-                    return;
-
-                for (Map::PlayerList::const_iterator i = PlList.begin(); i != PlList.end(); ++i)
-                {
-                    if (Player* pPlayer = i->getSource())
-                    {
-                        if (pPlayer && pPlayer->isDead() && me->isAlive())
-                        {
-                            if (pInstance)
-                                pInstance->SetData(DATA_VALITHRIA_DREAMWALKER_EVENT, FAIL);
-                        }
-                    }
-                }
-            }
-
-            void HeroicSummon(uint8 coords)
-            {
-                urand(0,1); DoSummon(CREATURE_ZOMBIE, Pos[coords]);
-                urand(0,1); DoSummon(CREATURE_SKELETON, Pos[coords]);
-                urand(0,1); DoSummon(CREATURE_ARCHMAGE, Pos[coords]);
-                urand(0,1); DoSummon(CREATURE_SUPPRESSER, Pos[coords]);
-                urand(0,1); DoSummon(CREATURE_ABOMINATION, Pos[coords]);
-            }
-
             void JustDied(Unit* /*pKiller*/)
             {
                 DoScriptText(SAY_DEATH, me);
 
-                summons.DespawnAll();
-
                 if (pInstance)
                     pInstance->SetData(DATA_VALITHRIA_DREAMWALKER_EVENT, FAIL);
             }
 
             void UpdateAI(const uint32 diff)
             {
-                ResetEvent();
+                if (!pInstance || pInstance->GetData(DATA_VALITHRIA_DREAMWALKER_EVENT) != IN_PROGRESS)
+                    return;
 
-                if (pInstance && pInstance->GetData(DATA_VALITHRIA_DREAMWALKER_EVENT) == IN_PROGRESS)
+                if (m_uiPortalTimer <= diff)
                 {
-                    DoStartNoMovement(me->getVictim());
+                    DoScriptText(SAY_OPEN_PORTAL, me);
+                    for(uint8 p = 0; p < 6; ++p)
+                    {
+                        DoCast(RAID_MODE(SPELL_PORTAL_N_PRE,SPELL_PORTAL_N_PRE,SPELL_PORTAL_H_PRE,SPELL_PORTAL_H_PRE));
+                    }
+                    m_uiPortalTimer = 50000;
+                } else m_uiPortalTimer -= diff;
 
-                    if (m_uiSummonTimer <= diff)
+                if (!bAboveHP && (HealthAbovePct(74)))
+                {
+                    DoScriptText(SAY_ABOVE_75, me);
+                    bAboveHP = true;
+                }
+
+                if (!bBelowHP && (HealthBelowPct(26)))
+                {
+                    DoScriptText(SAY_BELOW_25, me);
+                    bBelowHP = true;
+                }
+
+                if ((HealthAbovePct(99)) && !bEnd)
+                {
+                    DoScriptText(SAY_END, me);
+                    me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                    me->SetReactState(REACT_PASSIVE);
+                    me->RemoveAurasDueToSpell(SPELL_CORRUPTION);
+                    bEnd = true;
+                }
+
+                if (bEnd && m_uiEndTimer <= diff)
+                {
+                    switch(m_uiStage)
                     {
-                        uint8 location = RAID_MODE(1,3,1,3);
-                        for (uint8 i = 0; i < location; ++i)
-                        {
-                            HeroicSummon(i);
-                        }
-                        m_uiSummonTimer = 20000;
-                    } else m_uiSummonTimer -= diff;
-
-                    if (m_uiPortalTimer <= diff)
-                    {
-                        DoScriptText(SAY_OPEN_PORTAL, me);
-
-                        me->SummonCreature(CREATURE_PORTAL, me->GetPositionX()+15, me->GetPositionY()+15, me->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN, 15000);
-                        me->SummonCreature(CREATURE_PORTAL, me->GetPositionX()+10, me->GetPositionY()+25, me->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN, 15000);
-                        me->SummonCreature(CREATURE_PORTAL, me->GetPositionX()+15, me->GetPositionY()-25, me->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN, 15000);
-                        m_uiPortalTimer = 30000;
-                    } else m_uiPortalTimer -= diff;
-
-                    if (!bAboveHP && (HealthAbovePct(74)))
-                    {
-                        DoScriptText(SAY_ABOVE_75, me);
-                        bAboveHP = true;
+                        case 1:
+                            DoScriptText(SAY_BERSERK , me);
+                            DoCast(me, SPELL_RAGE);
+                            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                            ++m_uiStage;
+                            m_uiEndTimer = 6000;
+                            break;
+                        case 2:
+                            DoCast(SPELL_DREAM_SLIP);
+                            ++m_uiStage;
+                            m_uiEndTimer = 1000;
+                            break;
+                        case 3:
+                            pInstance->SetData(DATA_VALITHRIA_DREAMWALKER_EVENT, DONE);
+                            me->ForcedDespawn();
+                            m_uiEndTimer = 1000;
+                            bEnd = false;
+                            ++m_uiStage;
+                            break;
                     }
-
-                    if (!bBelowHP && (HealthBelowPct(26)))
-                    {
-                        DoScriptText(SAY_BELOW_25, me);
-                        bBelowHP = true;
-                    }
-
-                    if ((HealthAbovePct(99)) && !bEnd)
-                    {
-                        DoScriptText(SAY_END, me);
-                        me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
-                        me->SetReactState(REACT_PASSIVE);
-                        me->RemoveAurasDueToSpell(SPELL_CORRUPTION);
-
-                        bEnd = true;
-                    }
-
-                    if(bEnd)
-                    {
-                        if (m_uiEndTimer <= diff)
-                        {
-                            switch(m_uiStage)
-                            {
-                                case 1:
-                                    DoScriptText(SAY_BERSERK , me);
-                                    DoCast(me, SPELL_RAGE);
-                                    me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
-                                    ++m_uiStage;
-                                    m_uiEndTimer = 6000;
-                                    break;
-                                case 2:
-                                    {
-                                        combat_trigger->ForcedDespawn();
-                                        DoCast(me, SPELL_DREAM_SLIP, true);
-                                        ++m_uiStage;
-                                        m_uiEndTimer = 1000;
-                                    }
-                                    break;
-                                case 3:
-                                    if (pInstance)
-                                        pInstance->SetData(DATA_VALITHRIA_DREAMWALKER_EVENT, DONE);
-                                    me->ForcedDespawn();
-                                    m_uiEndTimer = 1000;
-                                    bEnd = false;
-                                    ++m_uiStage;
-                                    break;
-                            }
-                        } else m_uiEndTimer -= diff;
-                    }
-                }
+                } else m_uiEndTimer -= diff;
             }
 
         private:
@@ -259,12 +192,10 @@
             uint8 m_uiStage;
             uint32 m_uiPortalTimer;
             uint32 m_uiEndTimer;
-            uint32 m_uiSummonTimer;
             bool bIntro;
             bool bEnd;
             bool bAboveHP;
             bool bBelowHP;
-            SummonList summons;
         };
 
         CreatureAI* GetAI(Creature* pCreature) const
@@ -273,38 +204,29 @@
         }
 };
 
-class npc_dreamportal_icc : public CreatureScript
+class npc_dreamportal_icc : public CreatureScript //Ð¿Ð¾ÑÑÐ°Ð» Ð² ÐºÐ¾Ð¼Ð½Ð°ÑÐµ
 {
     public:
         npc_dreamportal_icc() : CreatureScript("npc_dreamportal_icc") { }
 
         struct npc_dreamportal_iccAI : public ScriptedAI
         {
-            npc_dreamportal_iccAI(Creature* pCreature) : ScriptedAI(pCreature)
+            npc_dreamportal_iccAI(Creature* pCreature) : ScriptedAI(pCreature) { }
+
+            void Reset()
             {
-                pInstance = pCreature->GetInstanceScript();
-            }
-
-            void InitializeAI()
-            {
-                DoCast(SPELL_PORTAL_VISUAL);
-                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
                 me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_STUNNED);
 
-                ScriptedAI::InitializeAI();
+                m_uiChangeTimer = 10000;
             }
 
             void MoveInLineOfSight(Unit *who)
             {
-                if (who->IsControlledByPlayer())
+                if(me->GetEntry() == CREATURE_PORTAL_NORMAL_MODE_NPC || me->GetEntry() == CREATURE_PORTAL_HEROIC_MODE_NPC)
                 {
-                    if (me->IsWithinDistInMap(who,5.0f))
+                    if (me->IsWithinDistInMap(who, 2.0f))
                     {
-                        pPlayer = who;
-                        pPlayer->CastSpell(pPlayer, SPELL_DREAM_STATE, false, 0, 0, 0);
-                        pPlayer->AddUnitMovementFlag(MOVEMENTFLAG_CAN_FLY);
-                        pPlayer->SendMovementFlagUpdate();
-                        m_uiStateTimer = 15000;
+                        who->CastSpell(who, SPELL_DREAM_STATE, true);
                         me->ForcedDespawn();
                     }
                 }
@@ -312,20 +234,25 @@
 
             void UpdateAI(const uint32 diff)
             {
-                if (!UpdateVictim())
-                    return;
+                if(me->GetEntry() == CREATURE_PORTAL_NORMAL_MODE_PRE)
+                {
+                    if (m_uiChangeTimer <= diff)
+                    {
+                        me->UpdateEntry(CREATURE_PORTAL_NORMAL_MODE_NPC);
+                    } else m_uiChangeTimer -= diff;
+                }
 
-                if (m_uiStateTimer <= diff)
+                if(me->GetEntry() == CREATURE_PORTAL_HEROIC_MODE_PRE)
                 {
-                    pPlayer->RemoveAurasDueToSpell(SPELL_DREAM_STATE);
-                    pPlayer->RemoveUnitMovementFlag(MOVEMENTFLAG_CAN_FLY);
-                    pPlayer->SendMovementFlagUpdate();
-                } else m_uiStateTimer -= diff;
+                    if (m_uiChangeTimer <= diff)
+                    {
+                        me->UpdateEntry(CREATURE_PORTAL_HEROIC_MODE_NPC);
+                    } else m_uiChangeTimer -= diff;
+                }
             }
+
         private:
-            InstanceScript* pInstance;
-
-            uint32 m_uiStateTimer;
+            uint32 m_uiChangeTimer;
         };
 
         CreatureAI* GetAI(Creature* pCreature) const
@@ -378,15 +305,14 @@
 
                 if (m_uiVoidTimer <= diff)
                 {
-                    if(Unit* pTarget = SelectUnit(SELECT_TARGET_TOPAGGRO, 0))
-                        me->SummonCreature(CREATURE_VOID, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN, 15000);
+                    if(Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 1))
+                        DoCast(pTarget, SPELL_VOID_SUMMON);
                     m_uiVoidTimer = 30000;
                 } else m_uiVoidTimer -= diff;
 
                 if (m_uiColumnTimer <= diff)
                 {
-                    Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 1);
-                    if(pTarget && pTarget->GetTypeId() == TYPEID_PLAYER)
+                    if(Unit* pTarget = SelectTarget(SELECT_TARGET_RANDOM, 1, 100.0f, true))
                     {
                         DoCast(pTarget, SPELL_COLUMN);
                     }
@@ -416,10 +342,7 @@
 
         struct npc_fireskell_iccAI : public ScriptedAI
         {
-            npc_fireskell_iccAI(Creature* pCreature) : ScriptedAI(pCreature)
-            {
-                pInstance = pCreature->GetInstanceScript();
-            }
+            npc_fireskell_iccAI(Creature* pCreature) : ScriptedAI(pCreature) { }
 
             void Reset()
             {
@@ -455,8 +378,6 @@
                 DoMeleeAttackIfReady();
             }
         private:
-            InstanceScript* pInstance;
-
             uint32 m_uiWasteTimer;
             uint32 m_uiFireballTimer;
         };
@@ -474,10 +395,7 @@
 
         struct npc_suppressor_iccAI : public ScriptedAI
         {
-            npc_suppressor_iccAI(Creature* pCreature) : ScriptedAI(pCreature)
-            {
-                pInstance = pCreature->GetInstanceScript();
-            }
+            npc_suppressor_iccAI(Creature* pCreature) : ScriptedAI(pCreature) { }
 
             void EnterCombat(Unit* /*who*/)
             {
@@ -497,8 +415,6 @@
                 } else m_uiCheckTimer -= diff;
             }
         private:
-            InstanceScript* pInstance;
-
             uint32 m_uiCheckTimer;
         };
 
@@ -515,20 +431,28 @@
 
         struct npc_manavoid_iccAI : public ScriptedAI
         {
-            npc_manavoid_iccAI(Creature* pCreature) : ScriptedAI(pCreature)
-            {
-                pInstance = pCreature->GetInstanceScript();
-            }
+            npc_manavoid_iccAI(Creature* pCreature) : ScriptedAI(pCreature) { }
 
             void Reset()
             {
                 DoCast(SPELL_MANA_VOID);
                 me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
                 DoStartNoMovement(me->getVictim());
+
+                m_uiLifeTime = 20000;
             }
 
-        private:
-            InstanceScript* pInstance;
+            void UpdateAI(const uint32 diff)
+            {
+                if (m_uiLifeTime <= diff)
+                {
+                    me->Kill(me);
+                    m_uiLifeTime = 20000;
+                } else m_uiLifeTime -= diff;
+            }
+            private:
+                uint32 m_uiLifeTime;
         };
 
         CreatureAI* GetAI(Creature* pCreature) const
@@ -544,10 +468,7 @@
 
         struct npc_glutabomination_iccAI : public ScriptedAI
         {
-            npc_glutabomination_iccAI(Creature* pCreature) : ScriptedAI(pCreature)
-            {
-                pInstance = pCreature->GetInstanceScript();
-            }
+            npc_glutabomination_iccAI(Creature* pCreature) : ScriptedAI(pCreature) { }
 
             void EnterCombat(Unit* /*who*/) { }
 
@@ -564,9 +485,7 @@
             void JustDied(Unit* /*killer*/)
             {
                 for (uint8 i = 1; i < 5; i++)
-                {
-                    me->SummonCreature(CREATURE_WORM, me->GetPositionX()+urand(3,6), me->GetPositionY()+urand(3,6), me->GetPositionZ(), 0, TEMPSUMMON_CORPSE_DESPAWN, 10000);
-                }
+                    DoCast(me, SPELL_WORM_SUMMON);
             }
 
             void UpdateAI(const uint32 diff)
@@ -583,8 +502,6 @@
                 DoMeleeAttackIfReady();
             }
         private:
-            InstanceScript* pInstance;
-
             uint32 m_uiSprayTimer;
         };
 
@@ -601,10 +518,7 @@
 
         struct npc_blistzombie_iccAI : public ScriptedAI
         {
-            npc_blistzombie_iccAI(Creature* pCreature) : ScriptedAI(pCreature)
-            {
-                pInstance = pCreature->GetInstanceScript();
-            }
+            npc_blistzombie_iccAI(Creature* pCreature) : ScriptedAI(pCreature) { }
 
             void EnterCombat(Unit* /*who*/) { }
 
@@ -640,8 +554,6 @@
                 DoMeleeAttackIfReady();
             }
         private:
-            InstanceScript* pInstance;
-
             uint32 m_uiBurstTimer;
             uint32 m_uiDelayTimer;
         };
@@ -652,17 +564,14 @@
         }
 };
 
-class npc_dreamcloud_icc : public CreatureScript
+class npc_dreamcloud_icc : public CreatureScript //Ð¾Ð±Ð»Ð°ÐºÐ¾ Ð² ÐºÐ¾Ð¼Ð½Ð°ÑÐµ
 {
     public:
         npc_dreamcloud_icc() : CreatureScript("npc_dreamcloud_icc") { }
 
         struct npc_dreamcloud_iccAI : public ScriptedAI
         {
-            npc_dreamcloud_iccAI(Creature* pCreature) : ScriptedAI(pCreature)
-            {
-                pInstance = pCreature->GetInstanceScript();
-            }
+            npc_dreamcloud_iccAI(Creature* pCreature) : ScriptedAI(pCreature) { }
 
             void Reset()
             {
@@ -680,11 +589,6 @@
                     DoCast(SPELL_VIGOR);
                 }
             }
-
-            void UpdateAI(const uint32 diff) { }
-
-        private:
-            InstanceScript* pInstance;
         };
 
         CreatureAI* GetAI(Creature* pCreature) const
@@ -693,16 +597,16 @@
         }
 };
 
-class npc_icc_column_stalker : public CreatureScript
+class npc_icc_combat_stalker : public CreatureScript
 {
     public:
-        npc_icc_column_stalker() : CreatureScript("npc_icc_column_stalker") { }
+        npc_icc_combat_stalker() : CreatureScript("npc_icc_combat_stalker") { }
 
-        struct npc_icc_column_stalkerAI : public ScriptedAI
+        struct npc_icc_combat_stalkerAI : public ScriptedAI
         {
-            npc_icc_column_stalkerAI(Creature* pCreature) : ScriptedAI(pCreature)
+            npc_icc_combat_stalkerAI(Creature* pCreature) : ScriptedAI(pCreature), summons(me)
             {
-                pInstance = pCreature->GetInstanceScript();
+                pInstance = me->GetInstanceScript();
             }
 
             void Reset()
@@ -710,19 +614,54 @@
                 me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
                 me->SetInCombatWithZone();
                 DoStartNoMovement(me->getVictim());
-                DoCast(SPELL_COLUMN_AURA);
+                m_uiSummonTimer = 20000;
+
+                if (pInstance && pInstance->GetData(DATA_VALITHRIA_DREAMWALKER_EVENT) != IN_PROGRESS)
+                    summons.DespawnAll();
             }
 
-            void UpdateAI(const uint32 /*uiDiff*/) { }
+            void HeroicSummon(uint8 coords)
+            {
+                if(urand(0,1)) DoSummon(CREATURE_ZOMBIE, Pos[coords]);
+                if(urand(0,1)) DoSummon(CREATURE_SKELETON, Pos[coords]);
+                if(urand(0,1)) DoSummon(CREATURE_ARCHMAGE, Pos[coords]);
+                if(urand(0,1)) DoSummon(CREATURE_SUPPRESSER, Pos[coords]);
+                if(urand(0,1)) DoSummon(CREATURE_ABOMINATION, Pos[coords]);
+            }
 
+            void JustSummoned(Creature* pSummoned)
+            {
+                if (Creature* valithria = Unit::GetCreature(*me, instance->GetData64(DATA_VALITHRIA_DREAMWALKER)))
+                    pSummoned->AI()->AttackStart(valithria);
 
-        private:
-            InstanceScript* pInstance;
+                summons.Summon(pSummoned);
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!pInstance || pInstance->GetData(DATA_VALITHRIA_DREAMWALKER_EVENT) != IN_PROGRESS)
+                    return;
+
+                if (m_uiSummonTimer <= diff)
+                {
+                    uint8 location = RAID_MODE(1,3,1,3);
+                    for (uint8 i = 0; i <= location; ++i)
+                    {
+                        HeroicSummon(i);
+                    }
+                    m_uiSummonTimer = 20000;
+                } else m_uiSummonTimer -= diff;
+            }
+            private:
+                InstanceScript* pInstance;
+
+                m_uiSummonTimer;
+                SummonList summons;
         };
 
         CreatureAI* GetAI(Creature* pCreature) const
         {
-            return new npc_icc_column_stalkerAI(pCreature);
+            return new npc_icc_combat_stalkerAI(pCreature);
         }
 };
 
@@ -737,5 +676,5 @@
     new npc_glutabomination_icc();
     new npc_blistzombie_icc();
     new npc_dreamcloud_icc();
-    new npc_icc_column_stalker();
+    new npc_icc_combat_stalker();
 }
\ No newline at end of file
