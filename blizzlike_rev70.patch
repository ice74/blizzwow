# HG changeset patch
# User asniker
# Date 1287044450 -21600
# Node ID 122ed92a5d56aff1f0c92b327dbf61006978268e
# Parent  12905392387c60fb3c05a724876942d794ee3bd8
fix ulduar

diff --git a/src/server/scripts/Northrend/Ulduar/ulduar/boss_razorscale.cpp b/src/server/scripts/Northrend/Ulduar/ulduar/boss_razorscale.cpp
--- a/src/server/scripts/Northrend/Ulduar/ulduar/boss_razorscale.cpp
+++ b/src/server/scripts/Northrend/Ulduar/ulduar/boss_razorscale.cpp
@@ -1,52 +1,59 @@
 /*
- * Copyright (C) 2008 - 2010 Trinity <http://www.trinitycore.org/>
- * Copyright (C) 2010 BloodyCore <http://code.google.com/p/bloodycore/>
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
+ * Copyright (C) 2008-2010 TrinityCore <http://www.trinitycore.org/>
  *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your
+ * option) any later version.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
+
+//TODO: Harpoon event is automated needs to be checked
+
+
 /* ScriptData
 SDName: Razorscale
 SDAuthor: PrinceCreed
 SD%Complete: 100
 EndScriptData */
 
+
 #include "ScriptPCH.h"
 #include "ulduar.h"
 
-#define SAY_GREET                   -1603260
-#define SAY_AGGRO_1                 "Give us a moment to prepare to build the turrets."
-#define SAY_AGGRO_2                 "Be on the lookout! Mole machines will be surfacing soon with those nasty Iron dwarves aboard!"
-#define SAY_AGGRO_3                 "Ready to move out, keep those dwarves off of our backs!"
-#define SAY_GROUND_PHASE            -1603261
-#define SAY_TURRETS                 "Fires out! Let's rebuild those turrets!"
 
-#define GOSSIP_ITEM_1               "Activate Harpoones!"
-#define EMOTE_HARPOON               "Harpoon Turret is ready for use!"
-#define EMOTE_BREATH                "Razorscale takes a deep breath..."
-#define EMOTE_PERMA                 "Razorscale grounded permanently!"
+enum Says
+{
+    SAY_GREET                       = -1603260,
+    SAY_GROUND_PHASE                = -1603261,
+    SAY_AGGRO_1                     = -1603262,
+    SAY_AGGRO_2                     = -1603263,
+    SAY_AGGRO_3                     = -1603264,
+    SAY_TURRETS                     = -1603265,
+    EMOTE_HARPOON                   = -1603266,
+    EMOTE_BREATH                    = -1603267,
+    EMOTE_PERMA                     = -1603268,
+};
+
+
+#define GOSSIP_ITEM_1 "Activate Harpoones!"
+
 
 enum Spells
 {
     SPELL_FLAMEBUFFET               = 64016,
-    SPELL_FIREBALL_10               = 62796,
-    SPELL_FIREBALL_25               = 63815,
-    SPELL_FLAME_GROUND_10           = 64709,
-    SPELL_FLAME_GROUND_25           = 64734,
+    SPELL_FIREBALL                  = 62796,
+    SPELL_FLAME_GROUND              = 64709,
     SPELL_WINGBUFFET                = 62666,
-    SPELL_FLAMEBREATH_10            = 63317,
-    SPELL_FLAMEBREATH_25            = 64021,
+    SPELL_FLAMEBREATH               = 63317,
     SPELL_FUSEARMOR                 = 64771,
     SPELL_DEVOURING_FLAME           = 63236,
     SPELL_HARPOON                   = 54933,
@@ -55,6 +62,7 @@
     SPELL_BERSERK                   = 47008
 };
 
+
 const Position PosHarpoon[4] =
 {
 {594.317f, -136.953f, 391.517f, 4.544f},
@@ -63,7 +71,9 @@
 {561.449f, -146.857f, 391.517f, 5.426f}
 };
 
-const Position PosEngSpawn = {591.951477f, -95.968292f, 391.516998f, 0};
+
+const Position PosEngSpawn = {591.951f, -95.968f, 391.517f, 0};
+
 
 const Position PosEngRepair[4] =
 {
@@ -73,14 +83,16 @@
 {560.609f, -142.967f, 391.517f, 5.074f}
 };
 
+
 const Position PosDefSpawn[4] =
 {
-{600.75f, -104.850f, 391.5169f, 0},
-{596.38f, -110.262f, 391.5169f, 0},
-{566.47f, -103.633f, 391.5169f, 0},
-{570.41f, -108.791f, 391.5169f, 0}
+{600.75f, -104.850f, 391.517f, 0},
+{596.38f, -110.262f, 391.517f, 0},
+{566.47f, -103.633f, 391.517f, 0},
+{570.41f, -108.791f, 391.517f, 0}
 };
 
+
 const Position PosDefCombat[4] =
 {
 {614.975f, -155.138f, 391.517f, 4.154f},
@@ -89,12 +101,14 @@
 {560.231f, -153.677f, 391.517f, 5.403f}
 };
 
-const Position RazorFlight = {588.050f, -251.191f, 470.535980f, 1.605303f};
-const Position RazorGround = {586.966f, -175.534f, 391.516998f, 1.691704f};
+
+const Position RazorFlight = {588.050f, -251.191f, 470.536f, 1.605f};
+const Position RazorGround = {586.966f, -175.534f, 391.517f, 1.692f};
+
 
 enum Mobs
 {
-    RAZORSCALE                      = 33186,
+    RAZORSCALE                      = 33186,// ?? why not use instance?
     NPC_DARK_RUNE_GUARDIAN          = 33388,
     NPC_DARK_RUNE_SENTINEL          = 33846,
     NPC_DARK_RUNE_WATCHER           = 33453,
@@ -106,38 +120,41 @@
     GOB_MOLE_MACHINE                = 194316
 };
 
+
 enum DarkRuneSpells
 {
     // Dark Rune Watcher
-    SPELL_CHAIN_LIGHTNING_10        = 64758,
-    SPELL_CHAIN_LIGHTNING_25        = 64759,
-    SPELL_LIGHTNING_BOLT_10         = 63809,
-    SPELL_LIGHTNING_BOLT_25         = 64696,
-    
+    SPELL_CHAIN_LIGHTNING           = 64758,
+    SPELL_LIGHTNING_BOLT            = 63809,
+
+
     // Dark Rune Guardian
     SPELL_STORMSTRIKE               = 64757,
-    
+
+
     // Dark Rune Sentinel
-    SPELL_BATTLE_SHOUT_10           = 46763,
-    SPELL_BATTLE_SHOUT_25           = 64062,
+    SPELL_BATTLE_SHOUT              = 46763,
     SPELL_HEROIC_STRIKE             = 45026,
-    SPELL_WHIRLWIND_10              = 63807,
-    SPELL_WHIRLWIND_25              = 63808,
+    SPELL_WHIRLWIND                 = 63807,
 };
 
+
 #define ACHIEVEMENT_QUICK_SHAVE     RAID_MODE(2919, 2921)
 
+
 #define ACTION_EVENT_START          1
 #define ACTION_GROUND_PHASE         2
 
+
 enum Phases
 {
-    PHASE_NULL = 0,
+    PHASE_NULL,
     PHASE_PERMAGROUND,
     PHASE_GROUND,
     PHASE_FLIGHT
 };
 
+
 enum Events
 {
     EVENT_NONE,
@@ -155,41 +172,42 @@
     EVENT_SUMMON
 };
 
+
 class boss_razorscale : public CreatureScript
 {
 public:
     boss_razorscale() : CreatureScript("boss_razorscale") { }
 
+
     CreatureAI* GetAI(Creature* pCreature) const
     {
         return new boss_razorscaleAI (pCreature);
     }
 
+
     struct boss_razorscaleAI : public BossAI
     {
-        boss_razorscaleAI(Creature *pCreature) : BossAI(pCreature, BOSS_RAZORSCALE)
-            , phase(PHASE_NULL)
+        boss_razorscaleAI(Creature *pCreature) : BossAI(pCreature, TYPE_RAZORSCALE), phase(PHASE_NULL)
         {
             // Do not let Razorscale be affected by Battle Shout buff
-            me->ApplySpellImmune(0, IMMUNITY_ID, RAID_MODE(SPELL_BATTLE_SHOUT_10, SPELL_BATTLE_SHOUT_25), true);
+            me->ApplySpellImmune(0, IMMUNITY_ID, (SPELL_BATTLE_SHOUT), true);
             me->ApplySpellImmune(0, IMMUNITY_EFFECT, SPELL_EFFECT_KNOCK_BACK, true);
             me->ApplySpellImmune(0, IMMUNITY_ID, 49560, true);  // Death Grip
-            pInstance = pCreature->GetInstanceScript();
-            pMap = me->GetMap();
         }
 
+
         Phases phase;
-        InstanceScript* pInstance;
-        Map* pMap;
-        
+
+
         uint32 EnrageTimer;
         uint32 FlyCount;
-        
+
+
         Creature* Harpoon[4];
-        Creature* MoleTrigger;
         bool PermaGround;
         bool Enraged;
 
+
         void Reset()
         {
             _Reset();
@@ -199,7 +217,8 @@
             PermaGround = false;
         }
 
-        void EnterCombat(Unit* who)
+
+        void EnterCombat(Unit* /*who*/)
         {
             _EnterCombat();
             for (uint8 n = 0; n < RAID_MODE(2,4); ++n)
@@ -213,42 +232,48 @@
             EnrageTimer = 15*60*1000;   // Enrage in 15 min
             Enraged = false;
             events.ScheduleEvent(EVENT_FLIGHT, 0, 0, PHASE_GROUND);
-            DoZoneInCombat();
         }
 
-        void JustDied(Unit* Killer)
+
+        void JustDied(Unit* /*Killer*/)
         {
             _JustDied();
-            
-            // Achievements
-            if (pInstance)
+
+
+            if (instance)
             {
                 // A Quick Shave
                 if (FlyCount <= 2)
-                    pInstance->DoCompleteAchievement(ACHIEVEMENT_QUICK_SHAVE);
+                    instance->DoCompleteAchievement(ACHIEVEMENT_QUICK_SHAVE);
             }
         }
 
+
         void UpdateAI(const uint32 diff)
         {
             if (!UpdateVictim())
                 return;
 
+
             if (me->getVictim() && !me->getVictim()->GetCharmerOrOwnerPlayerOrPlayerItself())
                 me->Kill(me->getVictim());
-                
+
+
             events.Update(diff);
-                
+
+
             if (HealthBelowPct(50) && !PermaGround)
                 EnterPermaGround();
-            
-            if (EnrageTimer<= diff && !Enraged)
+
+
+            if (EnrageTimer <= diff && !Enraged)
             {
                 DoCast(me, SPELL_BERSERK);
                 Enraged = true;
             }
             else EnrageTimer -= diff;
 
+
             if (phase == PHASE_GROUND)
             {
                 while (uint32 eventId = events.ExecuteEvent())
@@ -272,10 +297,10 @@
                             return;
                         case EVENT_LAND:
                             me->SetFlying(false);
-                            me->NearTeleportTo(586.966f, -175.534f, 391.516998f, 1.691704f);
+                            me->NearTeleportTo(586.966f, -175.534f, 391.517f, 1.692f);
                             DoCast(me, SPELL_STUN, true);
                             me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
-                            if (Creature *pCommander = me->GetCreature(*me, pInstance->GetData64(DATA_EXP_COMMANDER)))
+                            if (Creature *pCommander = me->GetCreature(*me, instance->GetData64(DATA_EXP_COMMANDER)))
                                 pCommander->AI()->DoAction(ACTION_GROUND_PHASE);
                             events.ScheduleEvent(EVENT_HARPOON, 0, 0, PHASE_GROUND);
                             events.ScheduleEvent(EVENT_BREATH, 30000, 0, PHASE_GROUND);
@@ -290,7 +315,7 @@
                             return;
                         case EVENT_BREATH:
                             me->MonsterTextEmote(EMOTE_BREATH, 0, true);
-                            DoCastAOE(RAID_MODE(SPELL_FLAMEBREATH_10, SPELL_FLAMEBREATH_25));
+                            DoCastAOE(SPELL_FLAMEBREATH);
                             events.CancelEvent(EVENT_HARPOON);
                             events.CancelEvent(EVENT_BREATH);
                             return;
@@ -316,12 +341,12 @@
                             return;
                         case EVENT_BREATH:
                             me->MonsterTextEmote(EMOTE_BREATH, 0, true);
-                            DoCastVictim(RAID_MODE(SPELL_FLAMEBREATH_10, SPELL_FLAMEBREATH_25));
+                            DoCastVictim(SPELL_FLAMEBREATH);
                             events.ScheduleEvent(EVENT_BREATH, 20000, 0, PHASE_PERMAGROUND);
                             return;
                         case EVENT_FIREBALL:
                             if (Unit *pTarget = SelectTarget(SELECT_TARGET_RANDOM, 0, 200, true))
-                                DoCast(pTarget, RAID_MODE(SPELL_FIREBALL_10, SPELL_FIREBALL_25));
+                                DoCast(pTarget, SPELL_FIREBALL);
                             events.ScheduleEvent(EVENT_FIREBALL, 3000, 0, PHASE_PERMAGROUND);
                             return;
                         case EVENT_DEVOURING:
@@ -340,6 +365,7 @@
                     }
                 }
 
+
                 DoMeleeAttackIfReady();
             }
             else
@@ -358,7 +384,7 @@
                             return;
                         case EVENT_FIREBALL:
                             if (Unit *pTarget = SelectTarget(SELECT_TARGET_RANDOM, 0, 200, true))
-                                DoCast(pTarget, RAID_MODE(SPELL_FIREBALL_10, SPELL_FIREBALL_25));
+                                DoCast(pTarget, SPELL_FIREBALL);
                             events.ScheduleEvent(EVENT_FIREBALL, 3000, 0, PHASE_FLIGHT);
                             return;
                         case EVENT_DEVOURING:
@@ -374,7 +400,8 @@
                 }
             }
         }
-        
+
+
         void EnterPermaGround()
         {
             me->MonsterTextEmote(EMOTE_PERMA, 0, true);
@@ -386,7 +413,7 @@
             me->RemoveAurasDueToSpell(SPELL_STUN);
             me->SetSpeed(MOVE_FLIGHT, 1.0f, true);
             PermaGround = true;
-            DoCastAOE(RAID_MODE(SPELL_FLAMEBREATH_10, SPELL_FLAMEBREATH_25));
+            DoCastAOE(SPELL_FLAMEBREATH);
             events.ScheduleEvent(EVENT_FLAME, 15000, 0, PHASE_PERMAGROUND);
             events.RescheduleEvent(EVENT_DEVOURING, 15000, 0, PHASE_PERMAGROUND);
             events.RescheduleEvent(EVENT_BREATH, 20000, 0, PHASE_PERMAGROUND);
@@ -396,6 +423,7 @@
             events.RescheduleEvent(EVENT_FUSE, 5000, 0, PHASE_PERMAGROUND);
         }
 
+
         void SummonAdds()
         {
             // Adds will come in waves from mole machines. One mole can spawn a Dark Rune Watcher
@@ -406,10 +434,11 @@
                 float x = irand(540.0f, 640.0f);    // Safe range is between 500 and 650
                 float y = irand(-230.0f, -195.0f);  // Safe range is between -235 and -145
                 float z = 391.5f;                   // Ground level
-                MoleTrigger = me->SummonCreature(MOLE_MACHINE_TRIGGER, x, y, z, 0, TEMPSUMMON_TIMED_DESPAWN, 10000);
+                me->SummonCreature(MOLE_MACHINE_TRIGGER, x, y, z, 0, TEMPSUMMON_TIMED_DESPAWN, 10000);
             }
         }
-        
+
+
         void DoAction(const int32 action)
         {
             switch(action)
@@ -422,20 +451,61 @@
             }
         }
     };
+
+
 };
+
+
 /*====================================================================================
 ====================================================================================*/
 
+
 class npc_expedition_commander : public CreatureScript
 {
 public:
     npc_expedition_commander() : CreatureScript("npc_expedition_commander") { }
 
+
+    bool OnGossipSelect(Player* pPlayer, Creature* pCreature, uint32 /*uiSender*/, uint32 uiAction)
+    {
+        pPlayer->PlayerTalkClass->ClearMenus();
+        InstanceScript* pInstance = pCreature->GetInstanceScript();
+        switch(uiAction)
+        {
+            case GOSSIP_ACTION_INFO_DEF:
+                if (pPlayer)
+                    pPlayer->CLOSE_GOSSIP_MENU();
+                CAST_AI(npc_expedition_commanderAI, (pCreature->AI()))->uiPhase = 1;
+                break;
+        }
+        return true;
+    }
+
+
+    bool OnGossipHello(Player* pPlayer, Creature* pCreature)
+    {
+        InstanceScript* pInstance = pCreature->GetInstanceScript();
+        if (pInstance && pInstance->GetBossState(TYPE_RAZORSCALE) == NOT_STARTED && pPlayer)
+        {
+            pPlayer->PrepareGossipMenu(pCreature);
+
+
+            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT,GOSSIP_ITEM_1,GOSSIP_SENDER_MAIN,GOSSIP_ACTION_INFO_DEF);
+            pPlayer->SEND_GOSSIP_MENU(13853, pCreature->GetGUID());
+        }
+        else pPlayer->SEND_GOSSIP_MENU(13910, pCreature->GetGUID());
+
+
+        return true;
+    }
+
+
     CreatureAI* GetAI(Creature* pCreature) const
     {
         return new npc_expedition_commanderAI (pCreature);
     }
 
+
     struct npc_expedition_commanderAI : public ScriptedAI
     {
         npc_expedition_commanderAI(Creature* pCreature) : ScriptedAI(pCreature), summons(me)
@@ -443,23 +513,27 @@
             pInstance = pCreature->GetInstanceScript();
             greet = false;
         }
-        
+
+
         InstanceScript* pInstance;
         SummonList summons;
 
+
         bool greet;
         uint32 uiTimer;
         uint8  uiPhase;
         Creature* engineer[4];
         Creature* defender[4];
 
+
         void Reset()
         {
             uiTimer = 0;
             uiPhase = 0;
             greet = false;
         }
-        
+
+
         void MoveInLineOfSight(Unit *who)
         {
             if (!greet && me->IsWithinDistInMap(who, 10.0f) && who->GetTypeId() == TYPEID_PLAYER)
@@ -467,14 +541,15 @@
                 DoScriptText(SAY_GREET, me);
                 greet = true;
             }
-            ScriptedAI::MoveInLineOfSight(who);
         }
-       
+
+
         void JustSummoned(Creature *summon)
         {
             summons.Summon(summon);
         }
-        
+
+
         void DoAction(const int32 action)
         {
             switch(action)
@@ -484,7 +559,8 @@
                     break;
             }
         }
-        
+
+
         void UpdateAI(const uint32 uiDiff)
         {
             ScriptedAI::UpdateAI(uiDiff);
@@ -493,7 +569,7 @@
                 switch(uiPhase)
                 {
                     case 1:
-                        pInstance->SetBossState(BOSS_RAZORSCALE, IN_PROGRESS);
+                        pInstance->SetBossState(TYPE_RAZORSCALE, IN_PROGRESS);
                         summons.DespawnAll();
                         uiTimer = 1000;
                         uiPhase = 2;
@@ -531,259 +607,69 @@
                         uiPhase = 5;
                         break;
                     case 5:
-                        if (Creature *pRazorscale = me->GetCreature(*me, pInstance->GetData64(DATA_RAZORSCALE)))
-                            if (pRazorscale->AI())
-                                pRazorscale->AI()->DoAction(ACTION_EVENT_START);
+                        if (Creature *pRazorscale = me->GetCreature(*me, pInstance->GetData64(TYPE_RAZORSCALE)))
+                            pRazorscale->AI()->DoAction(ACTION_EVENT_START);
                         engineer[0]->MonsterYell(SAY_AGGRO_1, LANG_UNIVERSAL, 0);
                         uiPhase = 6;
                         break;
                 }
-                if (!UpdateVictim())
-                    return;
-                    
-                DoMeleeAttackIfReady();
             }
             else uiTimer -= uiDiff;
         }
     };
 
 
-    bool Expedition_commander_ulduar(Player* pPlayer, Creature* pCreature)
-    {
-        InstanceScript *pInstance = (InstanceScript *) pCreature->GetInstanceScript();
-        
-        if (pInstance && pPlayer && pInstance->GetBossState(BOSS_RAZORSCALE) == NOT_STARTED)
-        {
-            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT,GOSSIP_ITEM_1,GOSSIP_SENDER_MAIN,GOSSIP_ACTION_INFO_DEF);
-            pPlayer->SEND_GOSSIP_MENU(13853, pCreature->GetGUID());
-        }else
-            pPlayer->SEND_GOSSIP_MENU(13910, pCreature->GetGUID());
-        return true;
-    }
+};
 
-    bool GossipSelect_commander_ulduar(Player* pPlayer, Creature* pCreature, uint32 uiSender, uint32 uiAction)
-    {
-        switch(uiAction)
-        {
-            case GOSSIP_ACTION_INFO_DEF:
-                if (pPlayer)
-                    pPlayer->CLOSE_GOSSIP_MENU();
-                CAST_AI(npc_expedition_commanderAI, (pCreature->AI()))->uiPhase = 1;
-                break;
-        }
-        return true;
-    }
-};
-class mob_devouring_flame : public CreatureScript
+
+
+
+class npc_mole_machine_trigger : public CreatureScript
 {
 public:
-    mob_devouring_flame() : CreatureScript("mob_devouring_flame") { }
+    npc_mole_machine_trigger() : CreatureScript("npc_mole_machine_trigger") { }
+
 
     CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new mob_devouring_flameAI (pCreature);
+        return new npc_mole_machine_triggerAI (pCreature);
     }
 
-    struct mob_devouring_flameAI : public ScriptedAI
+
+    struct npc_mole_machine_triggerAI : public Scripted_NoMovementAI
     {
-        mob_devouring_flameAI(Creature* pCreature) : ScriptedAI(pCreature)
+        npc_mole_machine_triggerAI(Creature* pCreature) : Scripted_NoMovementAI(pCreature)
         {
-            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE | UNIT_FLAG_NON_ATTACKABLE | UNIT_FLAG_NOT_SELECTABLE | UNIT_FLAG_PACIFIED);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE | UNIT_FLAG_NOT_SELECTABLE | UNIT_FLAG_PACIFIED);
+            me->SetVisibility(VISIBILITY_OFF);
         }
 
+
+        GameObject* MoleMachine;
+        uint32 SummonTimer;
+
+
         void Reset()
         {
-            DoCast(me, RAID_MODE(SPELL_FLAME_GROUND_10, SPELL_FLAME_GROUND_25));
-        }
-    };
-};
-class mob_darkrune_watcher : public CreatureScript
-{
-public:
-    mob_darkrune_watcher() : CreatureScript("mob_darkrune_watcher") { }
-
-    CreatureAI* GetAI(Creature* pCreature) const
-    {
-        return new mob_darkrune_watcherAI (pCreature);
-    }
-
-struct mob_darkrune_watcherAI : public ScriptedAI
-{
-    mob_darkrune_watcherAI(Creature* pCreature) : ScriptedAI(pCreature)
-    {
-        m_pInstance = pCreature->GetInstanceScript();
-    }
-
-    InstanceScript* m_pInstance;
-    int32 ChainTimer;
-    int32 LightTimer;
-
-    void Reset()
-    {
-        ChainTimer = urand(10000, 15000);
-        LightTimer = urand(1000, 3000);
-    }
-
-    void UpdateAI(const uint32 uiDiff)
-    {
-        if (!UpdateVictim())
-            return;
-
-        if (ChainTimer <= (int32)uiDiff)
-        {
-            DoCastVictim(RAID_MODE(SPELL_CHAIN_LIGHTNING_10, SPELL_CHAIN_LIGHTNING_25));
-            ChainTimer = urand(10000, 15000);
-        } else ChainTimer -= uiDiff;
-        
-        if (LightTimer <= (int32)uiDiff)
-        {
-            DoCastVictim(RAID_MODE(SPELL_LIGHTNING_BOLT_10, SPELL_LIGHTNING_BOLT_25));
-            LightTimer = urand(5000, 7000);
-        } else LightTimer -= uiDiff;
-
-        DoMeleeAttackIfReady();
-    }
-};
-
-};
-class mob_darkrune_guardian : public CreatureScript
-{
-public:
-    mob_darkrune_guardian() : CreatureScript("mob_darkrune_guardian") { }
-
-    CreatureAI* GetAI(Creature* pCreature) const
-    {
-        return new mob_darkrune_guardianAI (pCreature);
-    }
-
-    struct mob_darkrune_guardianAI : public ScriptedAI
-    {
-        mob_darkrune_guardianAI(Creature* pCreature) : ScriptedAI(pCreature)
-        {
-            m_pInstance = pCreature->GetInstanceScript();
+            if (MoleMachine = me->SummonGameObject(GOB_MOLE_MACHINE,me->GetPositionX(),me->GetPositionY(),me->GetPositionZ(),urand(0,6),0,0,0,0,300))
+                MoleMachine->SetGoState(GO_STATE_ACTIVE);
+            SummonTimer = 6000;
         }
 
-        InstanceScript* m_pInstance;
-        int32 StormTimer;
-
-        void Reset()
-        {
-            StormTimer = urand(3000, 6000);
-        }
 
         void UpdateAI(const uint32 uiDiff)
         {
             if (!UpdateVictim())
                 return;
 
-            if (StormTimer <= (int32)uiDiff)
-            {
-                DoCastVictim(SPELL_STORMSTRIKE);
-                StormTimer = urand(4000, 8000);
-            } else StormTimer -= uiDiff;
 
-            DoMeleeAttackIfReady();
-        }
-    };
-};
-class mob_darkrune_sentinel : public CreatureScript
-{
-public:
-    mob_darkrune_sentinel() : CreatureScript("mob_darkrune_sentinel") { }
-
-    CreatureAI* GetAI(Creature* pCreature) const
-    {
-        return new mob_darkrune_sentinelAI (pCreature);
-    }
-
-    struct mob_darkrune_sentinelAI : public ScriptedAI
-    {
-        mob_darkrune_sentinelAI(Creature* pCreature) : ScriptedAI(pCreature)
-        {
-            m_pInstance = pCreature->GetInstanceScript();
-        }
-
-        InstanceScript* m_pInstance;
-        int32 HeroicTimer;
-        int32 WhirlTimer;
-        int32 ShoutTimer;
-
-        void Reset()
-        {
-            HeroicTimer = urand(4000, 8000);
-            WhirlTimer = urand(20000, 30000);
-            ShoutTimer = urand(30000, 40000);
-        }
-
-        void UpdateAI(const uint32 uiDiff)
-        {
-            if (!UpdateVictim())
-                return;
-
-            if (HeroicTimer <= (int32)uiDiff)
-            {
-                DoCastVictim(SPELL_HEROIC_STRIKE);
-                HeroicTimer = urand(4000, 6000);
-            } else HeroicTimer -= uiDiff;
-            
-            if (WhirlTimer <= (int32)uiDiff)
-            {
-                DoCastVictim(RAID_MODE(SPELL_WHIRLWIND_10, SPELL_WHIRLWIND_25));
-                WhirlTimer = urand(20000, 30000);
-            } else WhirlTimer -= uiDiff;
-            
-            if (ShoutTimer <= (int32)uiDiff)
-            {
-                DoCast(me, RAID_MODE(SPELL_BATTLE_SHOUT_10, SPELL_BATTLE_SHOUT_25));
-                ShoutTimer = urand(30000, 40000);
-            } else ShoutTimer -= uiDiff;
-
-            DoMeleeAttackIfReady();
-        }
-    };
-};
-class mole_machine_trigger : public CreatureScript
-{
-public:
-    mole_machine_trigger() : CreatureScript("mole_machine_trigger") { }
-
-    CreatureAI* GetAI(Creature* pCreature) const
-    {
-        return new mole_machine_triggerAI (pCreature);
-    }
-
-    struct mole_machine_triggerAI : public ScriptedAI
-    {
-        mole_machine_triggerAI(Creature* pCreature) : ScriptedAI(pCreature)
-        {
-            m_pInstance = pCreature->GetInstanceScript();
-            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE | UNIT_FLAG_PACIFIED);
-            me->SetVisibility(VISIBILITY_OFF);
-        }
-
-        InstanceScript* m_pInstance;
-        GameObject* MoleMachine;
-        int32 SummomTimer;
-
-        void Reset()
-        {
-            MoleMachine = me->SummonGameObject(GOB_MOLE_MACHINE, me->GetPositionX(), me->GetPositionY(), me->GetPositionZ(), urand(0,6), 0, 0, 0, 0, 300);
-            if (MoleMachine)
-                MoleMachine->SetGoState(GO_STATE_ACTIVE);
-            SummomTimer = 6000;
-        }
-
-        void UpdateAI(const uint32 uiDiff)
-        {
-            if (!UpdateVictim())
-                return;
-
-            if (SummomTimer <= (int32)uiDiff)
+            if (SummonTimer <= uiDiff)
             {
                 float x = me->GetPositionX();
                 float y = me->GetPositionY();
                 float z = me->GetPositionZ();
-                
+
+
                 // One mole can spawn a Dark Rune Watcher with 1-2 Guardians, or a lone Sentinel
                 if (!(rand()%2))
                 {
@@ -792,29 +678,263 @@
                     for (uint8 i = 0; i < random; ++i)
                         me->SummonCreature(NPC_DARK_RUNE_GUARDIAN, x, y, z, 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 3000);
                 }
-                else
-                    me->SummonCreature(NPC_DARK_RUNE_SENTINEL, x, y, z, 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 3000);
+                   else me->SummonCreature(NPC_DARK_RUNE_SENTINEL, x, y, z, 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 3000);
                     
-                SummomTimer = 15000;
+                SummonTimer = 15000;
             }
-            else SummomTimer -= uiDiff;
+            else SummonTimer -= uiDiff;
         }
         
         void JustSummoned(Creature *summon)
         {
-            summon->AI()->DoAction(0);
+
             summon->AI()->DoZoneInCombat();
         }
     };
+
+
 };
 
+
+
+
+class npc_devouring_flame : public CreatureScript
+{
+public:
+    npc_devouring_flame() : CreatureScript("npc_devouring_flame") { }
+
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new npc_devouring_flameAI (pCreature);
+    }
+
+
+    struct npc_devouring_flameAI : public Scripted_NoMovementAI
+    {
+        npc_devouring_flameAI(Creature* pCreature) : Scripted_NoMovementAI(pCreature)
+        {
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE | UNIT_FLAG_NOT_SELECTABLE | UNIT_FLAG_PACIFIED);
+            me->SetDisplayId(11686);
+        }
+
+
+        void Reset()
+        {
+            DoCast(me, SPELL_FLAME_GROUND);
+        }
+    };
+
+
+};
+
+
+
+
+class npc_darkrune_watcher : public CreatureScript
+{
+public:
+    npc_darkrune_watcher() : CreatureScript("npc_darkrune_watcher") { }
+
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new npc_darkrune_watcherAI (pCreature);
+    }
+
+
+    struct npc_darkrune_watcherAI : public ScriptedAI
+    {
+        npc_darkrune_watcherAI(Creature *pCreature) : ScriptedAI(pCreature)
+        {
+            pInstance = pCreature->GetInstanceScript();
+        }
+
+
+        InstanceScript *pInstance;
+
+
+        uint32 ChainTimer;
+        uint32 LightTimer;
+
+
+        void Reset()
+        {
+            ChainTimer = urand(10000, 15000);
+            LightTimer = urand(1000, 3000);
+        }
+
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!UpdateVictim())
+                return;
+
+
+            if (ChainTimer <= uiDiff)
+            {
+                DoCastVictim(SPELL_CHAIN_LIGHTNING);
+                ChainTimer = urand(10000, 15000);
+            }
+            else ChainTimer -= uiDiff;
+
+
+            if (LightTimer <= uiDiff)
+            {
+                DoCastVictim(SPELL_LIGHTNING_BOLT);
+                LightTimer = urand(5000, 7000);
+            }
+            else LightTimer -= uiDiff;
+
+
+            DoMeleeAttackIfReady();
+        }
+    };
+
+
+};
+
+
+
+
+class npc_darkrune_guardian : public CreatureScript
+{
+public:
+    npc_darkrune_guardian() : CreatureScript("npc_darkrune_guardian") { }
+
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new npc_darkrune_guardianAI (pCreature);
+    }
+
+
+    struct npc_darkrune_guardianAI : public ScriptedAI
+    {
+        npc_darkrune_guardianAI(Creature *pCreature) : ScriptedAI(pCreature)
+        {
+            pInstance = pCreature->GetInstanceScript();
+        }
+
+
+        InstanceScript *pInstance;
+
+
+        uint32 StormTimer;
+
+
+        void Reset()
+        {
+            StormTimer = urand(3000, 6000);
+        }
+
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!UpdateVictim())
+                return;
+
+
+            if (StormTimer <= uiDiff)
+            {
+                DoCastVictim(SPELL_STORMSTRIKE);
+                StormTimer = urand(4000, 8000);
+            }
+            else StormTimer -= uiDiff;
+
+
+            DoMeleeAttackIfReady();
+        }
+    };
+
+
+};
+
+
+
+
+class npc_darkrune_sentinel : public CreatureScript
+{
+public:
+    npc_darkrune_sentinel() : CreatureScript("npc_darkrune_sentinel") { }
+
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new npc_darkrune_sentinelAI (pCreature);
+    }
+
+
+    struct npc_darkrune_sentinelAI : public ScriptedAI
+    {
+        npc_darkrune_sentinelAI(Creature *pCreature) : ScriptedAI(pCreature)
+        {
+            pInstance = pCreature->GetInstanceScript();
+        }
+
+
+        InstanceScript *pInstance;
+
+
+        uint32 HeroicTimer;
+        uint32 WhirlTimer;
+        uint32 ShoutTimer;
+
+
+        void Reset()
+        {
+            HeroicTimer = urand(4000, 8000);
+            WhirlTimer = urand(20000, 25000);
+            ShoutTimer = urand(15000, 30000);
+        }
+
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!UpdateVictim())
+                return;
+
+
+            if (HeroicTimer <= uiDiff)
+            {
+                DoCastVictim(SPELL_HEROIC_STRIKE);
+                HeroicTimer = urand(4000, 6000);
+            }
+            else HeroicTimer -= uiDiff;
+
+
+            if (WhirlTimer <= uiDiff)
+            {
+                DoCastVictim(SPELL_WHIRLWIND);
+                WhirlTimer = urand(20000, 25000);
+            }
+            else WhirlTimer -= uiDiff;
+
+
+            if (ShoutTimer <= uiDiff)
+            {
+                DoCast(me, SPELL_BATTLE_SHOUT);
+                ShoutTimer = urand(30000, 40000);
+            }
+            else ShoutTimer -= uiDiff;
+
+
+            DoMeleeAttackIfReady();
+        }
+    };
+
+
+};
+
+
 void AddSC_boss_razorscale()
 {
     new boss_razorscale();
     new npc_expedition_commander();
-    new mob_devouring_flame();
-    new mob_darkrune_watcher();
-    new mob_darkrune_guardian();
-    new mob_darkrune_sentinel();
-    new mole_machine_trigger();
+    new npc_mole_machine_trigger();
+    new npc_devouring_flame();
+    new npc_darkrune_watcher();
+    new npc_darkrune_guardian();
+    new npc_darkrune_sentinel();
+
 }
\ No newline at end of file
