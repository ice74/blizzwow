# HG changeset patch
# User asniker
# Date 1287222886 -21600
# Node ID 5c38cc51c3ae750f97d19a50f722501f768599cc
# Parent  4be79457f7401702bc62ad2cc30657933f286700
del

diff --git a/src/server/scripts/World/ChatLog/ChatLexicsCutter.cpp b/src/server/scripts/World/ChatLog/ChatLexicsCutter.cpp
deleted file mode 100644
--- a/src/server/scripts/World/ChatLog/ChatLexicsCutter.cpp
+++ /dev/null
@@ -1,245 +0,0 @@
-/*
- * Copyright (C) 2005-2009 MaNGOS <http://getmangos.com/>
- *
- * Copyright (C) 2008-2010 Trinity <http://www.trinitycore.org/>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#include "Common.h"
-#include "ChatLexicsCutter.h"
-
-LexicsCutter::LexicsCutter()
-{
-    m_sInvalidChars = "~`!@#$%^&*()-_+=[{]}|\\;:'\",<.>/?";
-}
-
-bool LexicsCutter::ReadUTF8(std::string& in, std::string& out, unsigned int& pos)
-{
-    if (pos >= in.length())
-        return false;
-
-    out = "";
-    unsigned char c = in[pos++];
-    out += c;
-    int toread = trailingBytesForUTF8[(int) c];
-    while ((pos < in.length()) && (toread > 0))
-    {
-        out += in[pos++];
-        toread--;
-    }
-
-    return true;
-}
-
-std::string LexicsCutter::trim(std::string& s, const std::string& drop)
-{
-    std::string r = s.erase(s.find_last_not_of(drop) + 1);
-    return r.erase(0, r.find_first_not_of(drop));
-}
-
-bool LexicsCutter::ReadLetterAnalogs(std::string& fileName)
-{
-    char line[1024];
-    unsigned int pos;
-    std::string line_s;
-    std::string lchar;
-    std::string lanalog;
-
-    FILE* file = fopen(fileName.c_str(), "rb");
-    while (!feof(file))
-    {
-        line[0] = 0x0;
-        fgets(line, 1020, file);
-
-        // check for UTF8 prefix and comments
-        if (strlen(line) >= 3)
-            if (line[0] == '\xEF' && line[1] == '\xBB' && line[2] == '\xBF')
-                strncpy(&line[0], &line[3], strlen(line) - 3);
-
-        if (strlen(line) >= 2)
-            if (line[0] == '/' && line[1] == '/')
-                continue;
-
-        // check for empty string
-        line_s = line; 
-        line_s = trim(line_s, "\x0A\x0D\x20");
-        if (line_s == "")
-            continue;
-
-        // process line without CR/LF
-        line_s = line; 
-        line_s = trim(line_s, "\x0A\x0D");
-    
-        pos = 0;
-        if (ReadUTF8(line_s, lchar, pos))
-        {
-            // create analogs vector
-            LC_AnalogVector av;
-            while (ReadUTF8(line_s, lanalog, pos))
-                av.push_back(lanalog);
-
-                // store vector in hash map
-            m_AnalogMap[lchar] = av;
-        }
-    }
-    fclose(file);
-    return true;
-}
-
-bool LexicsCutter::ReadInnormativeWords(std::string& fileName)
-{
-    char line[1024];
-    unsigned int pos;
-    std::string line_s;
-    std::string lchar;
-
-    FILE* file = fopen(fileName.c_str(), "rb");
-    while (!feof(file))
-    {
-        line[0] = 0x0;
-        fgets(line, 1020, file);
-
-        // check for UTF8 prefix and comment
-        if (strlen(line) >= 3)
-            if (line[0] == '\xEF' && line[1] == '\xBB' && line[2] == '\xBF')
-                strncpy(&line[0], &line[3], strlen(line) - 3);
-
-        if (strlen(line) >= 2)
-            if (line[0] == '/' && line[1] == '/')
-                continue;
-
-        // check for empty string
-        line_s = line; 
-        line_s = trim(line_s, "\x0A\x0D\x20");
-        if (line_s == "")
-            continue;
-
-        // process line without CR/LF
-        line_s = line; 
-        line_s = trim(line_s, "\x0A\x0D");
-    
-        // create word vector of vectors
-        LC_WordVector vw;
-        pos = 0;
-        while (ReadUTF8(line_s, lchar, pos))
-        {
-            // create letter set
-            LC_LetterSet vl;
-
-            // initialize letter set with letter read
-            vl.insert(lchar);
-
-            // find letter analogs and push them onto the vector
-            LC_AnalogMap::iterator itr = m_AnalogMap.find(lchar);
-            if (itr != m_AnalogMap.end())
-                // analogs present, iterate
-                for (LC_AnalogVector::iterator itr2 = itr->second.begin(); itr2 != itr->second.end(); itr2++)
-                    vl.insert(*itr2);
-
-            // add letter vector to word vector
-            vw.push_back(vl);
-        }
-
-        // push new word to words list
-        m_WordList.push_back(vw);
-    }
-    fclose(file);
-    return true;
-}
-
-void LexicsCutter::MapInnormativeWords()
-{
-    // process all the words in the vector
-    for (uint32 i = 0; i < m_WordList.size(); ++i)
-        // parse all analogs in the first word letter
-        for (LC_LetterSet::iterator itr = (*m_WordList[i].begin()).begin(); itr != (*m_WordList[i].begin()).end(); ++itr)
-            // map the word to its first letter variants
-            m_WordMap.insert(std::pair <std::string, uint32> (*itr, i));
-}
-
-bool LexicsCutter::CompareWord(std::string& str, unsigned int pos, LC_WordVector word)
-{
-    std::string lchar_prev;
-    std::string lchar;
-
-    // read first letter of the word into lchar_prev
-    ReadUTF8(str, lchar, pos);
-
-    // okay, here we go, comparing word
-    // first letter is already okay, we do begin from second and go on
-    LC_WordVector::iterator i = word.begin();
-    i++;
-    while (i != word.end())
-    {
-        // get letter from word, return false if the string is shorter
-        if (!ReadUTF8(str, lchar, pos))
-            return false;
-        // check, if the letter is in the set
-        LC_LetterSet ls = *i;
-        if (ls.count(lchar) == 0)
-        {
-            // letter is not in set, but we must check, if it is not space or repeat
-            if ((!(m_bIgnoreMiddleSpaces && (lchar == " "))) &&
-                (!(m_bIgnoreLetterRepeat && (lchar == lchar_prev))))
-            {
-                // no checks viable
-                return false;
-            }
-        }
-        else
-            // next word letter
-            i++;
-        // set previous string letter to compare if needed (this check can really conserve time)
-        if (m_bIgnoreLetterRepeat)
-            lchar_prev = lchar;
-    }
-    return true;
-}
-
-bool LexicsCutter::CheckLexics(std::string& Phrase)
-{
-    std::string lchar;
-    LC_WordMap::iterator i;
-    std::pair<LC_WordMap::iterator, LC_WordMap::iterator> ii;
-
-    if (Phrase.size() == 0)
-        return false;
-
-    // first, convert the string, adding spaces and removing invalid characters
-    // also create fast position vector for the new positions
-    std::string str = " ";
-    unsigned int pos = 0;
-    while (ReadUTF8(Phrase, lchar, pos))
-        if (m_sInvalidChars.find(lchar) == std::string::npos)
-            str.append(lchar);
-
-    // string prepared, now parse it and scan for all the words
-    unsigned int pos_prev = 0;
-    pos = 0;
-    while (ReadUTF8(str, lchar, pos))
-    {
-        // got character, now try to find wordmap for it
-        ii = m_WordMap.equal_range(lchar);
-        // iterate over all found words
-        for (i = ii.first; i != ii.second; i++)
-            // compare word at initial position
-            if (CompareWord(str, pos_prev, m_WordList[i->second]))
-                return true;
-       // set initial position to the current position
-       pos_prev = pos;
-    }
-    return false;
-}
diff --git a/src/server/scripts/World/ChatLog/ChatLexicsCutter.h b/src/server/scripts/World/ChatLog/ChatLexicsCutter.h
deleted file mode 100644
--- a/src/server/scripts/World/ChatLog/ChatLexicsCutter.h
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Copyright (C) 2005-2009 MaNGOS <http://getmangos.com/>
- *
- * Copyright (C) 2008-2010 Trinity <http://www.trinitycore.org/>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#ifndef TRINITY_CHATLEXICSCUTTER_H
-#define TRINITY_CHATLEXICSCUTTER_H
-
-typedef std::vector <std::string> LC_AnalogVector;
-typedef std::map <std::string, LC_AnalogVector> LC_AnalogMap;
-typedef std::set <std::string> LC_LetterSet;
-typedef std::vector <LC_LetterSet> LC_WordVector;
-typedef std::vector <LC_WordVector> LC_WordList;
-typedef std::multimap <std::string, uint32> LC_WordMap;
-
-static int trailingBytesForUTF8[256] = {
-    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
-    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
-};
-
-class LexicsCutter
-{
-    protected:
-        LC_AnalogMap m_AnalogMap;
-        LC_WordList m_WordList;
-        LC_WordMap m_WordMap;
-
-        std::string m_sInvalidChars;
-
-    public:
-        LexicsCutter();
-
-        static bool ReadUTF8(std::string& in, std::string& out, unsigned int& pos);
-
-        std::string trim(std::string& s, const std::string& drop = " ");
-        bool ReadLetterAnalogs(std::string& fileName);
-        bool ReadInnormativeWords(std::string& fileName);
-        void MapInnormativeWords();
-        bool CompareWord(std::string& str, unsigned int pos, LC_WordVector word);
-        bool CheckLexics(std::string& phrase);
-
-        std::vector <std::pair <uint32, uint32> > m_Found;
-        bool m_bIgnoreMiddleSpaces;
-        bool m_bIgnoreLetterRepeat;
-};
-
-#endif
-
diff --git a/src/server/scripts/World/ChatLog/ChatLog.cpp b/src/server/scripts/World/ChatLog/ChatLog.cpp
deleted file mode 100644
--- a/src/server/scripts/World/ChatLog/ChatLog.cpp
+++ /dev/null
@@ -1,494 +0,0 @@
-/*
- * Copyright (C) 2005-2009 MaNGOS <http://getmangos.com/>
- *
- * Copyright (C) 2008-2010 Trinity <http://www.trinitycore.org/>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#include "Common.h"
-#include "ChatLexicsCutter.h"
-#include "ChatLog.h"
-#include "Chat.h"
-#include "Group.h"
-#include "Guild.h"
-#include "Channel.h"
-#include "ObjectMgr.h"
-#include "SpellAuras.h"
-#include "Config.h"
-
-void ChatLogInfo::Init(ChatLogType type, bool bChat, bool bLexics)
-{
-    this->type = type;
-    std::string sType = ChatLog::GetChatNameByType(type);
-    if (bChat)
-    {
-        name = sConfig.GetStringDefault(std::string("ChatLog." + sType + ".File").c_str(), "");
-        screenFlag = sConfig.GetBoolDefault(std::string("ChatLog." + sType + ".Screen").c_str(), false);
-    }
-
-    if (bLexics)
-        cutFlag = sConfig.GetBoolDefault(std::string("ChatLog.Lexics." + sType + ".Cut").c_str(), true);
-}
-
-void ChatLogInfo::OpenFile(bool bDateSplit, std::string sDate, bool bUTFHeader)
-{
-    if (!name.empty() && !file)
-    {
-        std::string tmp = name;
-        if (bDateSplit)
-        {
-            // append date instead of $d if applicable
-            int dpos = tmp.find("$d");
-            if (dpos != tmp.npos)
-                tmp.replace(dpos, 2, sDate.c_str(), sDate.size());
-        }
-        file = fopen(tmp.c_str(), "a+b");
-        if (file)
-        {
-            if (bUTFHeader && (ftell(file) == 0))
-                fputs("\xEF\xBB\xBF", file);
-
-            std::string s("[SYSTEM] " + ChatLog::GetChatDescByType(type) + " Log Initialized\n");
-            WriteFile(s);
-        }
-    }
-}
-
-void ChatLogInfo::WriteFile(const std::string& msg)
-{
-    if (file)
-    {
-        ChatLog::OutTimestamp(file);
-        fprintf(file, "%s\n", msg.c_str());
-        fflush(file);
-    }
-}
-
-std::string ChatLog::GetChatNameByType(ChatLogType type)
-{
-    switch (type)
-    {
-        case CHAT_LOG_CHAT: return "Chat";
-        case CHAT_LOG_PARTY: return "Party";
-        case CHAT_LOG_GUILD: return "Guild";
-        case CHAT_LOG_WHISPER: return "Whisper";
-        case CHAT_LOG_CHANNEL: return "Channel";
-        case CHAT_LOG_RAID: return "Raid";
-        case CHAT_LOG_BATTLEGROUND: return "BattleGround";
-        case CHAT_LOG_INNORMATIVE: return "Lexics.Innormative";
-        default: return "Unknown";
-    }
-}
-
-std::string ChatLog::GetChatDescByType(ChatLogType type)
-{
-    switch (type)
-    {
-        case CHAT_LOG_CHAT: return "Chat";
-        case CHAT_LOG_PARTY: return "Party Chat";
-        case CHAT_LOG_GUILD: return "Guild Chat";
-        case CHAT_LOG_WHISPER: return "Whisper";
-        case CHAT_LOG_CHANNEL: return "Channels";
-        case CHAT_LOG_RAID: return "Raid Chat";
-        case CHAT_LOG_BATTLEGROUND: return "Battleground Chat";
-        case CHAT_LOG_INNORMATIVE: return "Lexics Innormative";
-        default: return "Unknown";
-    }
-}
-
-void ChatLog::OutTimestamp(FILE* file)
-{
-    time_t t = time(NULL);
-    tm* aTm = localtime(&t);
-    fprintf(file, "%-4d-%02d-%02d %02d:%02d:%02d ", aTm->tm_year + 1900, aTm->tm_mon + 1, aTm->tm_mday, aTm->tm_hour, aTm->tm_min, aTm->tm_sec);
-}
-
-ChatLog::ChatLog() : PlayerScript("LexicsChatLog"), m_pLexics(NULL)
-{
-    _Initialize();
-}
-
-ChatLog::~ChatLog()
-{
-    // close all files (avoiding double-close)
-    _CloseAllFiles();
-
-    if (m_pLexics)
-    {
-        delete m_pLexics;
-        m_pLexics = NULL;
-    }
-}
-
-void ChatLog::_Initialize()
-{
-    // determine, if the chat logs are enabled
-    m_bChatLogEnable = sConfig.GetBoolDefault("ChatLog.Enable", false);
-    m_bChatLogDateSplit = sConfig.GetBoolDefault("ChatLog.DateSplit", false);
-    m_bChatLogUTFHeader = sConfig.GetBoolDefault("ChatLog.UTFHeader", false);
-    m_bChatLogIgnoreUnprintable = sConfig.GetBoolDefault("ChatLog.IgnoreUnprintable", false);
-
-    // lexics cutter
-    m_bLexicsEnable = sConfig.GetBoolDefault("ChatLog.Lexics.Enable", false);
-
-    for (uint32 i = CHAT_LOG_CHAT; i < CHAT_LOG_COUNT; i++)
-        m_logs[i].Init(ChatLogType(i), m_bChatLogEnable, m_bLexicsEnable);
-
-    if (m_bLexicsEnable)
-    {
-        // initialize lexics cutter parameters
-        m_bLexicsInnormativeCut = sConfig.GetBoolDefault("ChatLog.Lexics.InnormativeCut", true);
-        m_bLexicsIgnoreGM = sConfig.GetBoolDefault("ChatLog.Lexics.IgnoreGM", true);
-        m_sLexicsCutReplacement = sConfig.GetStringDefault("ChatLog.Lexics.CutReplacement", "&!@^%!^&*!!! [gibberish]");
-        m_LexicsAction = LexicsActions(sConfig.GetIntDefault("ChatLog.Lexics.Action", LEXICS_ACTION_LOG));
-        m_unLexicsActionDuration = sConfig.GetIntDefault("ChatLog.Lexics.ActionDuration", 60000);
-
-        std::string sAnalogsFile = sConfig.GetStringDefault("ChatLog.Lexics.AnalogsFile", "");
-        std::string sWordsFile = sConfig.GetStringDefault("ChatLog.Lexics.WordsFile", "");
-
-        m_innormative.Init(CHAT_LOG_INNORMATIVE, true, false);
-        if (sAnalogsFile.empty() || sWordsFile.empty())
-            m_bLexicsEnable = false;
-        else
-        {
-            // initialize lexics cutter
-            m_pLexics = new LexicsCutter();
-            if (m_pLexics) 
-            {
-                m_pLexics->ReadLetterAnalogs(sAnalogsFile);
-                m_pLexics->ReadInnormativeWords(sWordsFile);
-                m_pLexics->MapInnormativeWords();
-            }
-
-            // read additional parameters
-            m_pLexics->m_bIgnoreLetterRepeat = sConfig.GetBoolDefault("ChatLog.Lexics.IgnoreRepeats", true);
-            m_pLexics->m_bIgnoreMiddleSpaces = sConfig.GetBoolDefault("ChatLog.Lexics.IgnoreSpaces", true);
-        }
-    }
-
-    // open all files (with aliasing)
-    _OpenAllFiles();
-}
-
-void ChatLog::_OpenAllFiles()
-{
-    std::string sDate;
-    if (m_bChatLogDateSplit)
-    {
-        time_t t = time(NULL);
-        tm* aTm = localtime(&t);
-        char szDate[12];
-        sprintf(szDate, "%-4d-%02d-%02d", aTm->tm_year + 1900, aTm->tm_mon + 1, aTm->tm_mday);
-        sDate = szDate;
-
-        m_nLastDay = aTm->tm_mday;
-    }
-
-    if (m_bChatLogEnable)
-    {
-        for (uint32 i = CHAT_LOG_CHAT; i <= CHAT_LOG_COUNT - 1; ++i)
-        {
-            for (uint32 j = i - 1; j >= CHAT_LOG_CHAT; --j)
-            {
-                if (m_logs[i].name == m_logs[j].name)
-                {
-                    m_logs[i].file = m_logs[j].file;
-                    break;
-                }
-            }
-            m_logs[i].OpenFile(m_bChatLogDateSplit, sDate, m_bChatLogUTFHeader);
-        }
-    }
-
-    // initialize innormative log
-    if (m_bLexicsEnable)
-        m_innormative.OpenFile(m_bChatLogDateSplit, sDate, m_bChatLogUTFHeader);
-}
-
-void ChatLog::_CloseAllFiles()
-{
-    for (uint32 i = CHAT_LOG_CHAT; i <= CHAT_LOG_COUNT - 1; ++i)
-    {
-        if (m_logs[i].file)
-        {
-            for (uint32 j = i + 1; j <= CHAT_LOG_COUNT - 1; ++j)
-                if (m_logs[i].file == m_logs[j].file)
-                    m_logs[j].file = NULL;
-            m_logs[i].CloseFile();
-        }
-    }
-
-    m_innormative.CloseFile();
-}
-
-void ChatLog::_CheckDateSwitch()
-{
-    if (m_bChatLogDateSplit)
-    {
-        time_t t = time(NULL);
-        tm* aTm = localtime(&t);
-        if (m_nLastDay != aTm->tm_mday)
-        {
-            // date switched
-            _CloseAllFiles();
-            _OpenAllFiles();
-        }
-    }
-}
-
-bool ChatLog::_ChatCommon(ChatLogType type, Player *player, std::string &msg)
-{
-    if (m_bLexicsEnable && m_pLexics && m_logs[type].cutFlag && m_pLexics->CheckLexics(msg)) 
-        _Punish(player, msg);
-
-    if (!m_bChatLogEnable)
-        return false;
-
-    if (m_bChatLogIgnoreUnprintable)
-    {
-        // have to ignore unprintables, verify string by UTF8 here
-        unsigned int pos = 0;
-        std::string lchar;
-        while (LexicsCutter::ReadUTF8(msg, lchar, pos))
-            if (lchar.size() == 1)
-                if (lchar[0] < ' ')
-                    return false ; // unprintable detected
-    }
-
-    return true;
-}
-
-void ChatLog::_Punish(Player* player, std::string& msg)
-{
-    // logging
-    std::string logStr = "";
-
-    _AppendPlayerName(player, logStr);
-    _WriteLog(m_innormative, logStr, msg, msg);
-
-    // cutting innormative lexics
-    if (m_bLexicsInnormativeCut)
-        msg = m_sLexicsCutReplacement;
-
-    if (!player || !player->GetSession())
-        return;
-
-    if (m_bLexicsIgnoreGM && (player->GetSession()->GetSecurity() > SEC_PLAYER))
-        return;
-
-    // special action
-    switch (m_LexicsAction)
-    {
-        case LEXICS_ACTION_SHEEP:       _ApplySpell(player, 118);   break;
-        case LEXICS_ACTION_STUN:        _ApplySpell(player, 13005); break;
-        case LEXICS_ACTION_STUCK:       _ApplySpell(player, 23312); break;
-        case LEXICS_ACTION_SICKNESS:    _ApplySpell(player, 15007); break;
-        case LEXICS_ACTION_SHEAR:       _ApplySpell(player, 41032); break;
-
-        case LEXICS_ACTION_DIE:
-            // oops, kicked the bucket
-            player->DealDamage(player, player->GetHealth(), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
-            break;
-        case LEXICS_ACTION_DRAIN:
-            // living corpse :)
-            player->DealDamage(player, player->GetHealth() - 5, NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
-            break;
-        case LEXICS_ACTION_SILENCE:
-            player->GetSession()->m_muteTime = time(NULL) + int64(m_unLexicsActionDuration / 1000);
-            break;
-        default:
-            // no action except logging
-            break;
-    }
-}
-
-inline void ChatLog::_ApplySpell(Player *pPlayer, uint32 spellId)
-{
-    if (Aura *a = pPlayer->AddAura(spellId, pPlayer))
-        a->SetDuration(m_unLexicsActionDuration);
-}
-
-inline void ChatLog::_WriteLog(ChatLogInfo log, std::string& logStr, const std::string& msg, const std::string& origMsg)
-{
-    if (log.screenFlag)
-        printf("%s %s", logStr.c_str(), msg.c_str());
-
-    _CheckDateSwitch();
-    logStr.append(" ").append(origMsg);
-    log.WriteFile(logStr);
-}
-
-inline void ChatLog::_AppendPlayerName(Player* player, std::string& s)
-{
-    s.append("[").append(player ? player->GetName() : "???").append("]");
-}
-
-inline void ChatLog::_AppendGroupMembers(Group* group, std::string& s)
-{
-    if (!group)
-        s.append(" {unknown group}:");
-    else
-    {
-        char sz[32];
-        sprintf(sz, UI64FMTD, group->GetGUID());
-        s.append(" {").append(sz).append("} [");
-        uint64 leaderGUID = group->GetLeaderGUID();
-        if (Player* pLeader = sObjectMgr.GetPlayer(leaderGUID))
-            s.append(pLeader->GetName());
-
-        Group::MemberSlotList members = group->GetMemberSlots();
-        for (Group::member_citerator itr = members.begin(); itr != members.end(); ++itr)
-        {
-            if (itr->guid == leaderGUID)
-                continue;
-
-            if (Player* pMember = sObjectMgr.GetPlayer(itr->guid))
-                s.append(",").append(pMember->GetName());
-        }
-        s.append("]:");
-    }
-}
-
-void ChatLog::OnChat(Player* player, uint32 type, uint32 /*lang*/, std::string msg)
-{
-    std::string origMsg = msg;
-    if (!_ChatCommon(CHAT_LOG_CHAT, player, msg))
-        return;
-
-    std::string logStr = "";
-    switch (type)
-    {
-        case CHAT_MSG_SAY:
-            logStr.append("{SAY}");
-            break;
-        case CHAT_MSG_EMOTE:
-            logStr.append("{EMOTE}");
-            break;
-        case CHAT_MSG_YELL:
-            logStr.append("{YELL}");
-            break;
-    }
-    _AppendPlayerName(player, logStr);
-    _WriteLog(m_logs[CHAT_LOG_CHAT], logStr, msg, origMsg);
-}
-
-void ChatLog::OnChat(Player *player, uint32 /*type*/, uint32 /*lang*/, std::string msg, Player *receiver)
-{
-    std::string origMsg = msg;
-    if (!_ChatCommon(CHAT_LOG_WHISPER, player, msg))
-        return;
-
-    std::string logStr = "";
-    _AppendPlayerName(player, logStr);
-    logStr.append("->");
-    _AppendPlayerName(receiver, logStr);
-
-    _WriteLog(m_logs[CHAT_LOG_WHISPER], logStr, msg, origMsg);
-}
-
-void ChatLog::OnChat(Player *player, uint32 type, uint32 /*lang*/, std::string msg, Group *group)
-{
-    std::string origMsg = msg;
-    std::string logStr = "";
-    _AppendPlayerName(player, logStr);
-
-    switch (type)
-    {
-    case CHAT_MSG_PARTY:
-    case CHAT_MSG_PARTY_LEADER:
-        if (!_ChatCommon(CHAT_LOG_PARTY, player, msg))
-            return;
-
-        switch (type)
-        {
-            case CHAT_MSG_PARTY:        logStr.append("->PARTY");         break;
-            case CHAT_MSG_PARTY_LEADER: logStr.append("->PARTY_LEADER");  break;
-        }
-        _AppendGroupMembers(group, logStr);
-
-        _WriteLog(m_logs[CHAT_LOG_PARTY], logStr, msg, origMsg);
-        break;
-    case CHAT_MSG_RAID_LEADER:
-    case CHAT_MSG_RAID_WARNING:
-    case CHAT_MSG_RAID:
-        if (!_ChatCommon(CHAT_LOG_RAID, player, msg))
-            return;
-        switch (type)
-        {
-            case CHAT_MSG_RAID_LEADER:  logStr.append("->RAID_LEADER");
-            case CHAT_MSG_RAID_WARNING: logStr.append("->RAID_WARN");
-            case CHAT_MSG_RAID:         logStr.append("->RAID");
-        }
-        _AppendGroupMembers(group, logStr);
-        _WriteLog(m_logs[CHAT_LOG_RAID], logStr, msg, origMsg);
-        break;
-    case CHAT_MSG_BATTLEGROUND:
-    case CHAT_MSG_BATTLEGROUND_LEADER:
-        if (!_ChatCommon(CHAT_LOG_BATTLEGROUND, player, msg))
-            return;
-        switch (type)
-        {
-            case CHAT_MSG_BATTLEGROUND:         logStr.append("->BG");         break;
-            case CHAT_MSG_BATTLEGROUND_LEADER:  logStr.append("->BG_LEADER");  break;
-        }
-        _AppendGroupMembers(group, logStr);
-        _WriteLog(m_logs[CHAT_LOG_BATTLEGROUND], logStr, msg, origMsg);
-        break;
-    }
-}
-
-void ChatLog::OnChat(Player *player, uint32 type, uint32 lang, std::string msg, Guild *guild)
-{
-    std::string origMsg = msg;
-    if (!_ChatCommon(CHAT_LOG_GUILD, player, msg))
-        return;
-
-    std::string logStr = "";
-    _AppendPlayerName(player, logStr);
-    switch (type)
-    {
-        case CHAT_MSG_GUILD:    logStr.append("->GUILD");      break;
-        case CHAT_MSG_OFFICER:  logStr.append("->GUILD_OFF");  break;
-    }
-    if (!guild)
-        logStr.append(" {unknowng guild}:");
-    else
-        logStr.append(" (").append(guild->GetName()).append("):");
-
-    _WriteLog(m_logs[CHAT_LOG_GUILD], logStr, msg, origMsg);
-}
-
-void ChatLog::OnChat(Player *player, uint32 /*type*/, uint32 /*lang*/, std::string msg, Channel *channel)
-{
-    std::string origMsg = msg;
-    if (!_ChatCommon(CHAT_LOG_CHANNEL, player, msg))
-        return;
-
-    std::string logStr = "";
-    _AppendPlayerName(player, logStr);
-
-    if (!channel)
-        logStr.append(" {unknown channel}");
-    else
-        logStr.append(" [").append(channel->GetName()).append("]");
-
-    _WriteLog(m_logs[CHAT_LOG_CHANNEL], logStr, msg, origMsg);
-}
-
-void AddSC_lexics_chat_log()
-{
-    new ChatLog();
-}
diff --git a/src/server/scripts/World/ChatLog/ChatLog.h b/src/server/scripts/World/ChatLog/ChatLog.h
deleted file mode 100644
--- a/src/server/scripts/World/ChatLog/ChatLog.h
+++ /dev/null
@@ -1,131 +0,0 @@
-/*
- * Copyright (C) 2005-2009 MaNGOS <http://getmangos.com/>
- *
- * Copyright (C) 2008-2010 Trinity <http://www.trinitycore.org/>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#ifndef TRINITYCORE_CHATLOG_H
-#define TRINITYCORE_CHATLOG_H
-
-#include "ScriptPCH.h"
-#include "ChatLexicsCutter.h"
-
-enum ChatLogType
-{
-    CHAT_LOG_NONE,
-    CHAT_LOG_CHAT,
-    CHAT_LOG_PARTY,
-    CHAT_LOG_GUILD,
-    CHAT_LOG_WHISPER,
-    CHAT_LOG_CHANNEL,
-    CHAT_LOG_RAID,
-    CHAT_LOG_BATTLEGROUND,
-
-    CHAT_LOG_COUNT,
-    CHAT_LOG_INNORMATIVE
-};
-
-enum LexicsActions
-{
-    LEXICS_ACTION_LOG,
-    LEXICS_ACTION_SHEEP,
-    LEXICS_ACTION_STUN,
-    LEXICS_ACTION_DIE,
-    LEXICS_ACTION_DRAIN,
-    LEXICS_ACTION_SILENCE,
-    LEXICS_ACTION_STUCK,
-    LEXICS_ACTION_SICKNESS,
-    LEXICS_ACTION_SHEAR,
-};
-
-struct ChatLogInfo
-{
-    FILE *file;
-    std::string name;
-    bool screenFlag;
-    bool cutFlag;
-    ChatLogType type;
-
-    ChatLogInfo() : name(""), file(NULL), screenFlag(false), cutFlag(false), type(CHAT_LOG_NONE) { }
-
-    void Init(ChatLogType type, bool bChat, bool bLexics);
-    void OpenFile(bool bDateSplit, std::string sDate, bool bUTFHeader);
-    void CloseFile()
-    {
-        if (file)
-        {
-            fclose(file);
-            file = NULL;
-        }
-    }
-    void WriteFile(const std::string& msg);
-};
-
-class ChatLog : public PlayerScript
-{
-public:
-    ChatLog();
-    ~ChatLog();
-    static std::string GetChatNameByType(ChatLogType type);
-    static std::string GetChatDescByType(ChatLogType type);
-    static void OutTimestamp(FILE *file);
-
-    void OnChat(Player* player, uint32 type, uint32 lang, std::string msg);
-    void OnChat(Player *player, uint32 type, uint32 lang, std::string msg, Player *receiver);
-    void OnChat(Player *player, uint32 type, uint32 lang, std::string msg, Group *group);
-    void OnChat(Player *player, uint32 type, uint32 lang, std::string msg, Guild *guild);
-    void OnChat(Player *player, uint32 type, uint32 lang, std::string msg, Channel *channel);
-
-private:
-    bool _ChatCommon(ChatLogType type, Player *player, std::string &msg);
-    void _Punish(Player* player, std::string& msg);
-    void _ApplySpell(Player *player, uint32 spellId);
-
-    void _Initialize();
-    void _OpenAllFiles();
-    void _CloseAllFiles();
-    void _CheckDateSwitch();
-    void _AppendPlayerName(Player* player, std::string& s);
-    void _AppendGroupMembers(Group* group, std::string& s);
-    void _WriteLog(ChatLogInfo log, std::string& logStr, const std::string& msg, const std::string& origMsg);
-
-    // Chats
-    bool m_bChatLogEnable;
-    bool m_bChatLogDateSplit;
-    bool m_bChatLogUTFHeader;
-    bool m_bChatLogIgnoreUnprintable;
-
-    int32 m_nLastDay;
-
-    ChatLogInfo m_logs[CHAT_LOG_COUNT];
-
-    // Lexics
-    LexicsCutter* m_pLexics;
-
-    bool m_bLexicsEnable;
-    bool m_bLexicsInnormativeCut;
-    bool m_bLexicsIgnoreGM;
-
-    std::string m_sLexicsCutReplacement;
-    LexicsActions m_LexicsAction;
-    uint32 m_unLexicsActionDuration;
-
-    ChatLogInfo m_innormative;
-};
-
-#define sChatLog (*ACE_Singleton<ChatLog, ACE_Thread_Mutex>::instance())
-#endif
diff --git a/src/server/worldserver/innormative_words.txt b/src/server/worldserver/innormative_words.txt
deleted file mode 100644
--- a/src/server/worldserver/innormative_words.txt
+++ /dev/null
@@ -1,280 +0,0 @@
-﻿ атсос 
- атсаси
- атсасу
- ахуе
- беспизд
- беспезд
- бесписд
- беспесд
- бля
-бляд
- блят 
- блять
- бляти
-взъебк
-впиздячи
-вротебанств
-вхуяри
-вхуячи
- выеба
- выебыш
- выебыва
- выпизд
- доеба
- гнида 
- гандон
- гондон
- гандос
-долбаеб
-долбоеб
-допизде
-дуроеб
- ебал
- ебан
- ебар
- ебат
- еби 
- ебичес
- ебичис
- ебис
- ебла
- ебли
- ебля
-ебнут
- ебокв
- ебобеи
- ебобее
- ебона
- ебена
- ебу 
- ебун
- ебуч
- ебс 
-ебукенти
- епал
- епашь
- епи 
- епт 
- епона 
- епут 
- заеб
- заиб
- заеп
-залупа
-залупи
-залупы
-запизде
-захуя
-захуи
-злоебуч
- ибаный
- ибаные
- ибаная
- ибаного
- ибасос 
- ипал 
- ипали
-ипан
- ипать
- ипат 
-испезде
-испезди
-испизде
-испизди
-исхуячи
-коноеби
- кончита 
- кончито 
- куроеб
-мозгоеб
- монда 
- манда 
-мудак
- мудач
-мудоеб
-мудопятств
-наебну
-напизди
-настоеба
-нахуи
-нахуя
- нах 
-нехуи
-нихуя
- некуя
- никуя
-ниибац
- ниибато
- ниибаты
- ниибата
- неипат
- неипет
- ниипет
- неебет
- неепет
- обконч
-объеба
-однохуиствен
-окуе
-остопизд
-отпизди
-отпизжу
-отпиздо
- отъеб
- отодран
- отодрал
- оттрах
- отхуяч
- охуе
-охуителън
-охуячи
- пезда
- пезды
- пездю
- пезду
- пезди
- пезде
- песда
- песды
- песдю
- песду
- песди
-перепизди
-перехуяри
- пизде
- пизды
- пиздю
- пизда
- пиздо
- пизду
- пизди
- пиздя
- пинде
- писде
- писды
- писдю
- писда
- писди
- писдо
- писду
- писдя
- пнх 
-подъеб
- поеба
-поебен
-поепат
- поипат
-попезде
-попезди
-попизде
-попизди
- посос 
- пососи
- пососу
- пососе
- посаси
- посасу
- посасе
-похуи
-похую
-похуяри
-приеба
-припезди
-припизди
-прихуяри
-проеба
-пропезди
-пропизди
- разеб
-разъеб
-распезд
-распизд
-расхуюжи
-спизди
-схуяри
-тыбля
-тычебля
- уебан
- уебал
- уебат
- уебак
-уебок
-уeбки
-уебыва
-упезди
-упизди
-худоебин
- хуе 
- хуес
- хуег
- хуел
- хуи
- хули 
- хуле 
- хулиф
- хулив
- хулеф
- хулев
- хую
- хуя
- нахер 
- херня 
- херню 
-чебля
- свинотрах
- сука
- суки 
- суке 
- суко
- сучар
- сучк 
- сучка 
- сучко 
- сучки 
- сучке 
- сцук 
- сцуке 
- сцуки 
- сцука
- сцуко 
- съеб 
-съебал
-съебис
-пидор
- пидар
- пидр 
- пидрил
- лаха 
- лахам
- лох 
- лоха 
- лохи 
- лохом
- лохос
- лоху 
- лошара 
- лошары 
- лошат 
- лоши 
- лошил
- лошит
- лошня 
- лошу 
- сосал
- соси 
- сосит
- сосу 
- сосун
- сосат
- отсос 
- отсоса
- отсоси
- отсосу
- отсосеш
- отсосем
- подсос
- трах
- фпизду 
- ужоснах
- цука 
- епаны
diff --git a/src/server/worldserver/letter_analogs.txt b/src/server/worldserver/letter_analogs.txt
deleted file mode 100644
--- a/src/server/worldserver/letter_analogs.txt
+++ /dev/null
@@ -1,59 +0,0 @@
-аАaA
-бБbB6
-вВvVwWB
-гГgGr
-дДdDg
-еЕёЁeE3
-ёЁеЕeE3
-жЖzZ
-зЗzZ3
-иИйЙiIuU1
-йЙиИiIjJuU1
-кКkK
-лЛlL1
-мМmM
-нНnNhH
-оОoO0Q
-пПpPn
-рРrRpP
-сСcC
-тТtT7
-уУuUyY
-фФfF
-хХhHxX
-цЦcC
-чЧ4
-шШ
-щЩ
-ъЪb
-ыЫyY
-ьЬb
-эЭ3
-юЮuU
-яЯR
-aAаА
-bBбБВ
-cCсСцЦ
-dDдД
-eEеЕ3
-fFфФ
-gGгГ
-hHхХнН
-iIиИйЙ1
-jJйЙиИ1
-kKкК
-lLлЛ1
-mMмМ
-nNнНп
-oOоО0
-pПпPрР
-qQО0
-rRрРяЯг
-sSсС
-tTтТ
-uUуУиИ
-vVвВ
-wWвВ
-xXхХ
-yYыЫуУ
-zZзЗ
